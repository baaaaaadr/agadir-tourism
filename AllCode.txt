Structure du dossier
Le numéro de série du volume est 000000B8 9690:CFCF
H:\MY APPS\AGADIR TOURISM\SRC
│   app.css
│   app.d.ts
│   app.html
│   service-worker.js
│   
├───lib
│   │   index.js
│   │   supabaseClient.js
│   │   
│   ├───components
│   │       BottomNav.svelte
│   │       ErrorMessage.svelte
│   │       Footer.svelte
│   │       Header.svelte
│   │       LoadingSpinner.svelte
│   │       Map.svelte
│   │       PlaceCard.svelte
│   │       RestaurantCard.svelte
│   │       SideNav.svelte
│   │       WeatherWidget.svelte
│   │       
│   └───stores
│           favoritesStore.js
│           navStore.js
│           themeStore.js
│           
└───routes
    │   +layout.svelte
    │   +page.js
    │   +page.svelte
    │   
    ├───about
    │       +page.svelte
    │       
    ├───conseils
    │       +page.svelte
    │       
    ├───contacts
    │       +page.svelte
    │       
    ├───currency
    │       +page.svelte
    │       
    ├───events
    │       +page.js
    │       +page.svelte
    │       
    ├───favorites
    │       +page.svelte
    │       
    ├───map
    │       +page.js
    │       +page.svelte
    │       
    ├───phrasebook
    │       +page.svelte
    │       
    ├───places
    │   │   +page.js
    │   │   +page.svelte
    │   │   
    │   └───[id]
    │           +page.js
    │           +page.svelte
    │           
    ├───restaurants
    │   │   +page.js
    │   │   +page.svelte
    │   │   
    │   └───[id]
    │           +page.js
    │           +page.svelte
    │           
    ├───search
    │       +page.js
    │       +page.svelte
    │       
    └───transport
            +page.svelte
            


==================== CONTENU DES FICHIERS ====================


========== FICHIER: H:\my apps\agadir tourism\src\lib\components\BottomNav.svelte ==========

<script>
    import { Home, Map, MapPin, Coffee } from 'lucide-svelte';
    import { page } from '$app/stores';

    const navItems = [
        { path: '/', label: 'Accueil', icon: Home },
        { path: '/map', label: 'Carte', icon: Map },
        { path: '/places', label: 'Lieux', icon: MapPin },
        { path: '/restaurants', label: 'Restaurants', icon: Coffee },
    ];
</script>

<nav class="bottom-nav">
    {#each navItems as item (item.path)}
        <a 
            href={item.path}
            aria-label={item.label}
            class:active={$page.url.pathname === item.path || ($page.url.pathname.startsWith(item.path) && item.path !== '/')}
        >
            <svelte:component this={item.icon} size={24} strokeWidth={1.5} />
            <span>{item.label}</span>
        </a>
    {/each}
</nav>

<style>
    .bottom-nav {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        display: flex;
        justify-content: space-around;
        align-items: center;
        background-color: var(--bg-secondary);
        border-top: 1px solid var(--border-color);
        box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        z-index: 1000;
        padding-bottom: env(safe-area-inset-bottom);
    }

    .bottom-nav a {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        flex: 1;
        padding: var(--space-sm) var(--space-xs);
        color: var(--text-secondary);
        text-decoration: none;
        font-size: 0.7rem;
        text-align: center;
        transition: color var(--transition-fast);
    }

    .bottom-nav a:hover {
        color: var(--text-primary);
    }

    .bottom-nav a.active {
        color: var(--ocean-blue);
        font-weight: 600;
    }

    .bottom-nav a span {
        margin-top: 2px;
        line-height: 1.2;
    }

    @media (min-width: 768px) {
        .bottom-nav {
            display: none;
        }
    }
</style>


========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\components\BottomNav.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\components\ErrorMessage.svelte ==========

<script>
    export let message = "Une erreur s'est produite.";
</script>

<div class="error-message">
    <p>ðŸ˜• Oops !</p>
    <p>{message}</p>
</div>

<style>
    .error-message {
        border: 1px solid #dc3545;
        color: #721c24;
        background-color: #f8d7da;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        text-align: center;
    }
    .error-message p:first-child {
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\components\ErrorMessage.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\components\Footer.svelte ==========

<script>
    import { browser } from '$app/environment';
    import { themeStore } from '$lib/stores/themeStore.js';
    import { Facebook, Instagram, Twitter, Youtube, Linkedin, Sun, Moon, Download } from 'lucide-svelte';

    // Social Links (as before)
    const socialLinks = [
        { name: 'Facebook', href: '#', icon: Facebook, ariaLabel: 'Suivez-nous sur Facebook' },
        { name: 'Instagram', href: '#', icon: Instagram, ariaLabel: 'Suivez-nous sur Instagram' },
        { name: 'Twitter', href: '#', icon: Twitter, ariaLabel: 'Suivez-nous sur Twitter (X)' },
        { name: 'YouTube', href: '#', icon: Youtube, ariaLabel: 'Suivez-nous sur YouTube' },
    ];

    // PWA Install Props
    export let showInstallButton = false;
    export let handleInstallClick = () => { console.warn('handleInstallClick function not passed to Footer'); };

    // --- Theme Toggle Logic ---
    let isCurrentlyDark = false; // Reactive variable to show the correct icon

    // Function to determine the effective theme (resolves 'system')
    function getEffectiveTheme(themeValue) {
        if (themeValue === 'system') {
            if (browser) {
                return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
            }
            return 'light'; // Default assumption for SSR or if matchMedia fails
        }
        return themeValue; // 'light' or 'dark'
    }

    // Reactive statement to update the icon based on the effective theme
    $: isCurrentlyDark = getEffectiveTheme($themeStore) === 'dark';

    function handleThemeToggle() {
        themeStore.toggle();
    }
    // --- End Theme Toggle Logic ---

</script>

<footer>
    <div class="footer-content">
        <a href="/" aria-label="Accueil Xplore Agadir" class="footer-logo-link">
            <img src="/assets/images/xplore-agadir-icon.png" alt="Xplore Agadir Logo" class="footer-logo-img" />
        </a>

        <div class="copyright">
            <p> {new Date().getFullYear()} Office du Tourisme Agadir (Maquette PWA). Tous droits rÃ©servÃ©s.</p>
        </div>

        <div class="footer-controls">
            <div class="social-icons">
                {#each socialLinks as link (link.name)}
                    <a href={link.href} target="_blank" rel="noopener noreferrer" aria-label={link.ariaLabel} title={link.name} class="social-link">
                        <svelte:component this={link.icon} size={22} strokeWidth={1.5} />
                    </a>
                {/each}
            </div>

            <!-- Install App Button (Conditional) -->
            {#if showInstallButton}
                <button
                    class="btn btn-accent install-button"
                    on:click={handleInstallClick}
                    title="Installer l'application"
                    aria-label="Installer l'application PWA"
                >
                    <Download size={18} />
                    Installer l'App
                </button>
            {/if}

            <button
                class="theme-toggle-button"
                on:click={handleThemeToggle}
                aria-label={isCurrentlyDark ? 'Passer au thÃ¨me clair' : 'Passer au thÃ¨me sombre'}
                title={isCurrentlyDark ? 'Passer au thÃ¨me clair' : 'Passer au thÃ¨me sombre'}
            >
                {#if isCurrentlyDark}
                    <Sun size={20} />
                {:else}
                    <Moon size={20} />
                {/if}
            </button>
        </div>
    </div>
</footer>

<style>
    footer {
        padding: var(--space-lg) var(--space-md);
        margin-top: var(--space-xxl);
        background-color: var(--bg-secondary);
        color: var(--text-secondary);
        font-size: 0.9em;
        border-top: 1px solid var(--border-color);
        transition: background-color var(--transition-normal), border-color var(--transition-normal);
    }

    .footer-content {
        max-width: 1100px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        gap: var(--space-md);
        text-align: center;
    }

    /* --- Footer Logo (New Layout) --- */
    .footer-logo-link {
        display: block;
        margin-bottom: var(--space-md);
        text-align: center;
        line-height: 1;
    }
    .footer-logo-img {
        height: 60px;
        width: auto;
        max-width: 200px;
        display: inline-block;
        vertical-align: middle;
    }

    .copyright p {
        margin: 0;
        font-size: 0.85em;
    }

    /* Controls wrapper remains the same */
    .footer-controls {
        display: flex;
        align-items: center;
        gap: var(--space-lg);
    }
    .social-icons {
        display: flex;
        gap: var(--space-md);
        align-items: center;
    }

    /* Responsive adjustments for Desktop */
    @media (min-width: 768px) {
        .footer-content {
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
            text-align: left;
            gap: var(--space-lg);
        }

        .footer-logo-link {
            width: 100%;
            order: -1;
            margin-bottom: var(--space-md);
        }

        .copyright {
            order: 0;
            text-align: left;
        }

        .footer-controls {
            order: 1;
            gap: var(--space-xl);
        }
        .social-icons {
            gap: var(--space-lg);
        }
    }

    /* Add padding below the footer ONLY on mobile to prevent overlap with BottomNav */
    @media (max-width: 767px) {
        footer {
            padding-bottom: calc(60px + var(--space-lg) + env(safe-area-inset-bottom));
        }
    }

    /* Theme Toggle Button Styles */
    .theme-toggle-button {
        background: none;
        border: 1px solid var(--border-color);
        color: var(--text-secondary);
        cursor: pointer;
        padding: var(--space-sm);
        border-radius: var(--radius-full);
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color var(--transition-normal), color var(--transition-normal), border-color var(--transition-normal), transform var(--transition-fast);
    }

    .theme-toggle-button:hover {
        background-color: var(--sandy-beige-light);
        color: var(--text-primary);
        border-color: var(--sandy-beige-dark);
        transform: scale(1.1);
    }

    :global([data-theme="dark"]) .theme-toggle-button:hover {
        background-color: var(--sandy-beige-dark);
        border-color: var(--sandy-beige-light);
    }

    .social-link {
        color: var(--text-secondary);
        transition: color var(--transition-normal), transform var(--transition-normal);
        display: inline-block;
    }

    .social-link:hover {
        color: var(--ocean-blue);
        transform: scale(1.15);
    }

    /* Install Button Styles */
    .install-button {
        background-color: var(--ocean-blue);
        color: white;
        border: none;
        padding: var(--space-sm) var(--space-md);
        font-size: 0.85rem;
        border-radius: var(--radius-full);
        display: inline-flex;
        align-items: center;
        gap: var(--space-sm);
        transition: background-color var(--transition-normal), transform var(--transition-fast);
    }

    .install-button svg {
        color: currentColor; /* Inherits white color from button */
        margin-right: var(--space-sm);
    }

    .install-button:hover {
        background-color: var(--ocean-blue-dark);
        transform: scale(1.05);
    }

    .install-button:active {
        transform: scale(0.95);
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\components\Footer.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\components\Header.svelte ==========

<!-- START OF FILE: src/lib/components/Header.svelte -->
<script>
    import { goto } from '$app/navigation'; // Import navigation function
    // Import icons needed, including Heart
    import { Menu, Search, X, Heart } from 'lucide-svelte';
    import { isSideNavOpen } from '$lib/stores/navStore';
    import { fly } from 'svelte/transition'; // Import transition

    let showSearchInput = false; // State to control input visibility
    let searchQuery = ''; // State to bind to the input value

    function toggleNav() {
        isSideNavOpen.update(value => !value);
    }

    function toggleSearchInput() {
        showSearchInput = !showSearchInput;
        if (!showSearchInput) {
            searchQuery = ''; // Clear query when closing
        }
        // Optional: focus input when shown (needs tick or timeout)
        // if (showSearchInput) {
        //     setTimeout(() => document.getElementById('searchInput')?.focus(), 50);
        // }
    }

    function handleSearchSubmit() {
        if (searchQuery.trim()) {
            console.log('Navigating to search with query:', searchQuery);
            // Navigate to the search page with the query parameter
            goto(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
            // Optionally close the input after searching
            showSearchInput = false;
            searchQuery = '';
        } else {
            console.log('Search query is empty, not navigating.');
            // Maybe show a small message or just close the input
             showSearchInput = false; // Close if empty submit
        }
    }

    // Allow submitting search by pressing Enter in the input
    function handleKeydown(event) {
        if (event.key === 'Enter') {
            handleSearchSubmit();
        }
         if (event.key === 'Escape') {
             toggleSearchInput(); // Close on Escape key
         }
    }

</script>

<header class:search-active={showSearchInput}>
    <div class="header-content">
        <!-- Menu Button -->
        {#if !showSearchInput}
            <button class="menu-button" on:click={toggleNav} aria-label="Ouvrir le menu">
                <Menu size={24} />
            </button>
        {/if}

        <!-- Logo (conditionally hidden during search on small screens) -->
        <div class="logo" class:hidden-on-search={showSearchInput}>
            <a href="/" class="logo-link" aria-label="Accueil Xplore Agadir">
                <img src="/assets/images/xplore-agadir-icon.png" alt="Xplore Agadir Icon" class="header-logo-img" />
            </a>
        </div>

        <!-- Search Input Area (conditionally shown) -->
        {#if showSearchInput}
            <div class="search-input-container" transition:fly={{ x: 100, duration: 200 }}>
                <input
                    type="search"
                    id="searchInput"
                    placeholder="Rechercher un lieu, restaurant..."
                    bind:value={searchQuery}
                    on:keydown={handleKeydown}
                    autofocus
                />
                 <!-- Submit button within input area -->
                <button class="submit-search-button" on:click={handleSearchSubmit} aria-label="Lancer la recherche">
                     <Search size={20} />
                </button>
                 <!-- Close button within input area -->
                 <button class="close-search-button" on:click={toggleSearchInput} aria-label="Fermer la recherche">
                     <X size={20} />
                 </button>
            </div>
        {/if}


        <!-- Buttons on the right (Favorites, Search Toggle) -->
        {#if !showSearchInput}
            <div class="header-right-actions">
                <!-- Favorites Button -->
                <a href="/favorites" aria-label="Voir les favoris" title="Mes Favoris" class="header-action-button favorites-link-button">
                    <Heart size={24} />
                </a>

                 <!-- Original Search Toggle Button -->
                 <button class="search-button header-action-button" on:click={toggleSearchInput} aria-label="Ouvrir la recherche">
                    <Search size={24} />
                 </button>
            </div>
        {/if}
    </div>
</header>

<style>
    header {
        background-color: var(--ocean-blue);
        color: white;
        position: sticky;
        top: 0;
        z-index: 1200;
        box-shadow: var(--shadow-md);
        padding: 0 var(--space-md);
        transition: background-color 0.3s ease;
    }

    /* Slightly different background when search is active */
    header.search-active {
        /* background-color: var(--ocean-blue-dark); */
    }

    .header-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        height: 60px;
        max-width: 1200px;
        margin: 0 auto;
        gap: var(--space-sm); /* Add gap between items */
    }

    /* --- Logo --- */
    .logo {
        flex-grow: 1;
        text-align: center;
        transition: opacity 0.2s ease, transform 0.2s ease;
        opacity: 1;
        transform: scale(1);
        display: flex;
        justify-content: center;
        align-items: center;
        /* Adjust margin if needed due to gap */
        margin-left: auto;
        margin-right: auto;
    }
    .logo-link {
        display: inline-block;
        line-height: 1;
        color: white;
        text-decoration: none;
    }
    .header-logo-img {
        height: 40px;
        width: auto;
        max-width: 100%;
        vertical-align: middle;
    }

    /* --- Search Input Area --- */
    .search-input-container {
        display: flex;
        align-items: center;
        background-color: white;
        border-radius: var(--radius-md);
        padding: var(--space-xs) var(--space-sm);
        flex-grow: 1; /* Take available space */
        margin: 0 var(--space-sm); /* Spacing around input */
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
    }

    .search-input-container input[type="search"] {
        border: none;
        outline: none;
        flex-grow: 1;
        font-size: 0.95rem;
        padding: var(--space-xs) 0; /* Minimal vertical padding */
        background: transparent;
        color: var(--text-primary);
    }
     /* Clear default cancel button */
    input[type="search"]::-webkit-search-decoration,
    input[type="search"]::-webkit-search-cancel-button,
    input[type="search"]::-webkit-search-results-button,
    input[type="search"]::-webkit-search-results-decoration {
      -webkit-appearance:none;
    }

    .submit-search-button, .close-search-button {
         background: transparent;
         border: none;
         color: var(--ocean-blue); /* Icon color */
         cursor: pointer;
         padding: var(--space-xs);
         display: flex;
         align-items: center;
         justify-content: center;
         border-radius: var(--radius-sm);
         transition: background-color var(--transition-fast);
    }
     .close-search-button {
         color: var(--text-secondary); /* Slightly muted close button */
     }

     .submit-search-button:hover {
         background-color: var(--ocean-blue-light);
         color: white;
     }
      .close-search-button:hover {
         background-color: var(--sandy-beige-light);
         color: var(--text-primary);
     }


    /* --- Buttons --- */
    .menu-button { /* Specific style for menu button */
        background: transparent;
        border: none;
        color: white; /* Keep default color */
        cursor: pointer;
        padding: var(--space-sm);
        border-radius: var(--radius-full);
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color var(--transition-normal);
        flex-shrink: 0; /* Prevent buttons from shrinking */
    }

    /* ! --- New styles for Menu Icon Color --- ! */
    .menu-button svg {
        color: var(--sandy-beige-light); /* Change icon color to light beige */
        transition: color var(--transition-fast);
    }

    .menu-button:hover {
        background-color: transparent; /* Remove background change on hover */
    }

    .menu-button:hover svg {
        color: var(--sandy-beige); /* Optional: Darken beige on hover */
    }
    /* ! --- End New Menu Icon Styles --- ! */


    /* --- General Header Action Buttons (Search, Favorites) --- */
    .header-right-actions { /* Wrapper for right-side buttons */
        display: flex;
        align-items: center;
        gap: var(--space-xs); /* Small gap between Fav and Search */
        flex-shrink: 0;
    }

    .header-action-button { /* Shared style for Fav link and Search button */
        background: transparent;
        border: none;
        color: white;
        cursor: pointer;
        padding: var(--space-sm);
        border-radius: var(--radius-full);
        display: flex; /* Ensures icon inside is centered */
        align-items: center;
        justify-content: center;
        transition: background-color var(--transition-normal);
        flex-shrink: 0;
        text-decoration: none; /* Remove underline from link if it's an <a> */
    }
    .header-action-button:hover {
         background-color: rgba(255, 255, 255, 0.1); /* Default hover for Fav/Search */
    }
    /* Ensure the icon color is set correctly if needed */
    .header-action-button svg {
         color: white; /* Default color for Fav/Search icons */
    }


     /* --- Responsive Adjustments --- */
     @media (max-width: 600px) {
        .header-content {
            height: 56px;
         }
         /* Hide logo when search is active on small screens */
         .logo.hidden-on-search {
             opacity: 0;
             transform: scale(0.8);
             /* flex-grow: 0; */ /* Remove its space - might cause jump */
             width: 0; /* Try hiding width */
             overflow: hidden;
             pointer-events: none; /* Prevent interaction */
             margin: 0; padding: 0;
         }
        .search-input-container {
             margin-left: 0; /* Take full space when logo hidden */
        }
    }

</style>
<!-- END OF FILE: src/lib/components/Header.svelte -->

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\components\Header.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\components\LoadingSpinner.svelte ==========

<div class="spinner-container">
    <div class="spinner"></div>
    <p>Chargement...</p>
</div>

<style>
    .spinner-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        color: #555;
    }
    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border-left-color: var(--ocean-blue, #0077cc); 
        animation: spin 1s ease infinite;
        margin-bottom: 0.5rem;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\components\LoadingSpinner.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\components\Map.svelte ==========

<script>
    import { browser } from '$app/environment';
    import { onMount, onDestroy, tick } from 'svelte';

    // Props
    export let center = [30.4202, -9.5982];
    export let zoom = 13;
    export let markers = [];
    export let mapId = 'leaflet-map';
    export let minZoom = 10; // Optional: Set a minimum zoom level

    // RÃ©fÃ©rences et Ã©tat interne
    let mapContainerElement = null;
    let mapInstance = null;
    let markerLayerGroup = null;
    let L = null;

    let isLoading = true;
    let errorLoading = null;

    // --- !!! DEFINE YOUR BOUNDS HERE !!! ---
    // IMPORTANT: Replace these coordinates with precise ones for your desired area!
    const southWest = L ? L.latLng(30.0, -10.0) : null; // Estimated SW corner (Lat, Lng)
    const northEast = L ? L.latLng(30.7, -8.8) : null; // Estimated NE corner (Lat, Lng)
    const mapBounds = L && southWest && northEast ? L.latLngBounds(southWest, northEast) : null;
    // --- End Bounds Definition ---


    onMount(async () => {
        if (browser) {
            await tick();

            if (!mapContainerElement) {
                 console.error(`[${mapId}] Ã‰lÃ©ment conteneur introuvable au montage.`);
                 errorLoading = "Erreur interne: Conteneur de carte non trouvÃ©.";
                 isLoading = false;
                 return;
             }
            if (typeof window.L === 'undefined' || window.L === null) {
                console.error(`[${mapId}] ERREUR: Objet global L non trouvÃ©.`);
                errorLoading = "Impossible de charger la librairie de carte (CDN).";
                isLoading = false;
                return;
            }

            L = window.L; // Assign global L
             console.log(`[${mapId}] Objet global L trouvÃ©.`);

            // --- Re-create bounds object now that L is defined ---
            // You could also move the const definitions inside onMount if L is guaranteed
            const sw = L.latLng(30.0, -10.0); // Re-define or use variable from outer scope if safe
            const ne = L.latLng(30.7, -8.8);
            const boundsForMap = L.latLngBounds(sw, ne);
            // ---

            if (mapContainerElement && !mapInstance) {
                 // Pass bounds to initializeMap
                 initializeMap(boundsForMap);
            }
            isLoading = false;

        } else {
            isLoading = false;
        }
    });

    onDestroy(() => {
        if (mapInstance) {
            console.log(`[${mapId}] Destruction de la carte.`);
            mapInstance.remove();
            mapInstance = null;
            markerLayerGroup = null;
        }
    });

    // --- MODIFIED: Accept bounds as argument ---
    function initializeMap(boundsToSet) {
        if (!L || !mapContainerElement || mapInstance) return;

        console.log(`[${mapId}] Initialisation de la carte Leaflet via CDN.`);
        try {
            // --- ADD maxBounds and maxBoundsViscosity ---
            mapInstance = L.map(mapContainerElement, {
                 maxBounds: boundsToSet,          // Restrict panning/zooming
                 maxBoundsViscosity: 1.0,      // Make bounds solid
                 minZoom: minZoom              // Optional: Prevent zooming too far out
            }).setView(center, zoom);
            // --- End additions ---


            // Ensure the initial view is within the bounds
             if (boundsToSet && !boundsToSet.contains(mapInstance.getCenter())) {
                 console.warn(`[${mapId}] Initial center is outside maxBounds. Fitting bounds.`);
                 mapInstance.fitBounds(boundsToSet); // Adjust view to fit bounds
             }


            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Ã‚Â© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(mapInstance);

            markerLayerGroup = L.layerGroup().addTo(mapInstance);
            updateMapMarkers(markers);

            // Invalidate size after a short delay
            setTimeout(() => {
                 if (mapInstance) { mapInstance.invalidateSize(); }
            }, 150);

        } catch (e) {
             console.error(`[${mapId}] Erreur pendant L.map() ou ajout de couches (CDN):`, e);
             errorLoading = `Erreur lors de la crÃ©ation de la carte: ${e.message}`;
             if (mapInstance) mapInstance.remove();
             mapInstance = null;
        }
    }

    function updateMapMarkers(newMarkers) {
        if (!mapInstance || !markerLayerGroup || !L) return;
        markerLayerGroup.clearLayers();
        (newMarkers || []).forEach(markerInfo => {
            if (markerInfo.lat != null && markerInfo.lon != null) {
                try {
                    // 1. Determine Marker Class based on type (and optionally category/cuisine)
                    let markerClass = 'custom-map-marker'; // Base class
                    if (markerInfo.type === 'place') {
                        markerClass += ' marker-type-place';
                        // --- Optional: Add specific category classes ---
                        // Example: if (markerInfo.category === 'Plage') markerClass += ' marker-cat-beach';
                        // Add more else if blocks for other categories here if needed
                    } else if (markerInfo.type === 'restaurant') {
                        markerClass += ' marker-type-restaurant';
                        // --- Optional: Add specific cuisine classes ---
                        // Example: if (markerInfo.cuisine === 'Marocain') markerClass += ' marker-cuisine-marocain';
                        // Add more else if blocks for other cuisines here if needed
                    }

                    // 2. Create the L.divIcon instance
                    const customIcon = L.divIcon({
                        className: markerClass,
                        // Correct Bounding Box: width=20, height=20(circle)+15(line)=35
                        iconSize: [20, 35],
                        // Correct Anchor: X=Center(20/2)=10, Y=Total height(20+15)=35
                        iconAnchor: [10, 35],
                        // Correct Popup Anchor: Above circle center (X=0 relative to anchor, Y=negative(radius+stem+offset))
                        // Y = -(10 + 15 + 3) = -28 (approx)
                        popupAnchor: [0, -28]
                    });

                    // 3. Create the marker using the custom icon
                    const marker = L.marker([markerInfo.lat, markerInfo.lon], {
                        icon: customIcon,
                        // Optional: Add alt text for accessibility
                        alt: markerInfo.name || 'Map marker'
                    });

                    // 4. Bind popup (same as before)
                    if (markerInfo.popupText) {
                        marker.bindPopup(markerInfo.popupText, { closeButton: true, autoClose: false });
                    }

                    // 5. Add marker to layer group (same as before)
                    marker.addTo(markerLayerGroup);

                } catch (e) {
                    // Update error message context if needed
                    console.error(`[${mapId}] Erreur crÃ©ation marqueur custom: `, markerInfo, e);
                }
            }
        });
    }

    // --- Reactivity (keep existing code) ---
     $: if (mapInstance && L) {
        updateMapMarkers(markers);
     }
    // $: if (mapInstance && L && center && zoom) {
        // Maybe disable automatic setView if bounds are active? Or ensure new center/zoom is valid.
        // mapInstance.setView(center, zoom);
    // }

</script>

<!-- HTML and Style blocks remain the same -->
<!-- Conteneur de la carte (reste pareil) -->
<div bind:this={mapContainerElement} id={mapId} class="map-container-style" role="application" aria-label="Carte interactive">
    {#if !browser}
        <p>Carte interactive (chargement...)</p>
    {:else if isLoading}
        <p>Chargement de la carte...</p>
    {:else if errorLoading}
        <p class="map-error">Erreur: {errorLoading}</p>
    {/if}
</div>

<style>
    /* Le CSS reste identique */
    .map-container-style { height: 400px; width: 100%; background-color: #f0f0f0; border-radius: 8px; border: 1px solid #ccc; margin-top: 1rem; box-shadow: 0 1px 5px rgba(0,0,0,0.1); position: relative; overflow: hidden; }
    :global(#main-map.map-container-style) { height: 500px; }
    :global(#detail-map.map-container-style) { height: 300px; }
    :global(#detail-map-resto.map-container-style) { height: 300px; } /* Added for restaurant detail map */
    .map-container-style p { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #555; font-style: italic; text-align: center; padding: 0 1rem; }
    .map-error { color: #dc3545; font-weight: bold; font-style: normal; }
    :global(.leaflet-popup-content-wrapper) { border-radius: 5px; background-color: rgba(255, 255, 255, 0.9); box-shadow: 0 1px 5px rgba(0,0,0,0.2); }
    :global(.leaflet-popup-content) { font-size: 0.9rem; line-height: 1.4; margin: 10px 15px; max-height: 200px; overflow-y: auto; }
    :global(.leaflet-popup-content p) { margin: 0.5em 0; }
    :global(.leaflet-popup-content a) { color: var(--ocean-blue, #0077cc); font-weight: bold; text-decoration: none; } /* Use variable */
    :global(.leaflet-popup-content a:hover) { text-decoration: underline; }
    :global(.leaflet-container a.leaflet-popup-close-button) { color: #555 !important; padding: 6px 6px 0 0 !important; }
    /* Add custom marker styles here */
    :global(.custom-map-marker) { /* Base class for custom markers */ }
    :global(.marker-type-place) { /* Style for place markers */ }
    :global(.marker-type-restaurant) { /* Style for restaurant markers */ }
    /* Add more styles for specific categories or cuisines if needed */
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\components\Map.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\components\PlaceCard.svelte ==========

<script>
    import { favoritesStore } from '$lib/stores/favoritesStore'; // Import the store
    import { Heart } from 'lucide-svelte'; // Import the Heart icon

    export let place;

    // Chemin vers l'image par dÃƒfaut
    const defaultImage = '/assets/images/default-placeholder.jpg';

    // Reactive declaration to check if this place is a favorite
    // It automatically updates when the store changes
    $: isFav = $favoritesStore.some(fav => fav.id === place.id && fav.type === 'place');

    // Function to toggle favorite status
    function toggleFavorite(event) {
        event.stopPropagation(); // IMPORTANT: Prevent link navigation when clicking the heart
        event.preventDefault(); // Also prevent default anchor behavior just in case

        if (isFav) {
            favoritesStore.remove('place', place.id);
        } else {
            favoritesStore.add('place', place.id, place.name); // Pass name for context
        }
         console.log('Toggled favorite for place:', place.id, !isFav);
    }
</script>

<a href="/places/{place.id}" class="card-link">
    <article class="card">
        <!-- Favorite Button -->
        <button
            class="favorite-button"
            on:click={toggleFavorite}
            aria-label={isFav ? 'Retirer des favoris' : 'Ajouter aux favoris'}
            title={isFav ? 'Retirer des favoris' : 'Ajouter aux favoris'}
        >
            <Heart size={20} fill={isFav ? 'var(--sunset-orange)' : 'none'} stroke={isFav ? 'var(--sunset-orange)' : 'currentColor'} />
        </button>

        <img
            src={place.image_url || defaultImage}
            alt="Image de {place.name}"
            class="card-image"
            loading="lazy"
            onerror="this.onerror=null; this.src='{defaultImage}';"
        />
        <div class="card-content">
            <h3>{place.name}</h3>
            {#if place.category}
                <span class="category-badge">{place.category}</span>
            {/if}
            {#if place.description}
                <p>{place.description.substring(0, 80)}{place.description.length > 80 ? '...' : ''}</p>  <!-- Reduced description length slightly -->
            {/if}
        </div>
    </article>
</a>

<style>
    .card-link {
        text-decoration: none;
        color: inherit;
        display: block;
        border-radius: var(--radius-lg);
        overflow: hidden;
        position: relative;
        background-color: var(--bg-secondary);
        border: 1px solid transparent;
        transition: transform var(--transition-normal) ease-in-out,
                    box-shadow var(--transition-normal) ease-in-out,
                    border-color var(--transition-normal) ease-in-out;
    }
    .card-link:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-lg);
        border-color: var(--ocean-blue-light);
    }

    .card {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    /* --- Favorite Button Styles --- */
    .favorite-button {
        position: absolute;
        top: var(--space-sm);
        right: var(--space-sm);
        background-color: rgba(255, 255, 255, 0.75);
        border: none;
        border-radius: var(--radius-full);
        padding: var(--space-xs);
        cursor: pointer;
        z-index: 5;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-secondary);
        transition: background-color var(--transition-fast), color var(--transition-fast), transform var(--transition-fast);
        backdrop-filter: blur(3px);
    }

    .favorite-button:hover {
        background-color: rgba(255, 255, 255, 0.95);
        color: var(--sunset-orange-dark);
        transform: scale(1.1);
    }

    :global([data-theme="dark"]) .favorite-button {
        background-color: rgba(50, 50, 50, 0.75);
        color: var(--text-secondary);
    }
    :global([data-theme="dark"]) .favorite-button:hover {
        background-color: rgba(70, 70, 70, 0.95);
        color: var(--sunset-orange-light);
    }


    /* --- Card Image --- */
    .card-image {
        width: 100%;
        height: 180px;
        object-fit: cover;
        display: block;
        box-shadow: inset 0 0 5px rgba(0,0,0,0.05);
    }

    /* --- Card Content --- */
    .card-content {
        padding: var(--space-md) var(--space-lg);
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    h3 {
        margin-top: 0;
        margin-bottom: var(--space-sm);
        font-size: 1.15rem;
        color: var(--ocean-blue-dark);
        line-height: 1.3;
    }

    .category-badge {
        display: inline-block;
        background-color: var(--sandy-beige);
        color: var(--text-primary);
        padding: 0.25em 0.7em;
        border-radius: var(--radius-sm);
        font-size: 0.75rem;
        font-weight: 500;
        margin-bottom: var(--space-md);
        align-self: flex-start;
    }

    :global([data-theme="dark"]) .category-badge {
        background-color: var(--sandy-beige-dark);
        color: var(--text-primary);
    }

    p {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-bottom: 0;
        line-height: 1.5;
        flex-grow: 1;
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\components\PlaceCard.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\components\RestaurantCard.svelte ==========

<script>
    import { favoritesStore } from '$lib/stores/favoritesStore'; // Import the store
    import { Heart } from 'lucide-svelte'; // Import the Heart icon

    export let restaurant;
    const defaultImage = '/assets/images/default-placeholder.jpg';

    // Reactive declaration to check if this restaurant is a favorite
    $: isFav = $favoritesStore.some(fav => fav.id === restaurant.id && fav.type === 'restaurant');

    // Function to toggle favorite status
    function toggleFavorite(event) {
        event.stopPropagation(); // IMPORTANT: Prevent link navigation
        event.preventDefault();

        if (isFav) {
            favoritesStore.remove('restaurant', restaurant.id);
        } else {
            favoritesStore.add('restaurant', restaurant.id, restaurant.name); // Pass name
        }
         console.log('Toggled favorite for restaurant:', restaurant.id, !isFav);
    }
</script>

<a href="/restaurants/{restaurant.id}" class="card-link">
    <article class="card">
         <!-- Favorite Button -->
         <button
            class="favorite-button"
            on:click={toggleFavorite}
            aria-label={isFav ? 'Retirer des favoris' : 'Ajouter aux favoris'}
            title={isFav ? 'Retirer des favoris' : 'Ajouter aux favoris'}
        >
            <Heart size={20} fill={isFav ? 'var(--sunset-orange)' : 'none'} stroke={isFav ? 'var(--sunset-orange)' : 'currentColor'} />
        </button>

        <img
            src={restaurant.image_url || defaultImage}
            alt="Image de {restaurant.name}"
            class="card-image"
            loading="lazy"
            onerror="this.onerror=null; this.src='{defaultImage}';"
        />
        <div class="card-content">
            <h3>{restaurant.name}</h3>
            {#if restaurant.cuisine_type || restaurant.price_range}
                 <div class="badges">
                     {#if restaurant.cuisine_type}
                        <span class="category-badge cuisine">{restaurant.cuisine_type}</span>
                     {/if}
                     {#if restaurant.price_range}
                        <span class="category-badge price">{restaurant.price_range}</span>
                     {/if}
                 </div>
            {/if}
            {#if restaurant.description}
                 <p>{restaurant.description.substring(0, 80)}{restaurant.description.length > 80 ? '...' : ''}</p> <!-- Reduced description length -->
            {/if}
        </div>
    </article>
</a>

<style>
    /* Styles virtually identical to PlaceCard.svelte for consistency */
    .card-link {
        text-decoration: none;
        color: inherit;
        display: block;
        border-radius: var(--radius-lg);
        overflow: hidden;
        position: relative;
        background-color: var(--bg-secondary);
        border: 1px solid transparent;
        transition: transform var(--transition-normal) ease-in-out,
                    box-shadow var(--transition-normal) ease-in-out,
                    border-color var(--transition-normal) ease-in-out;
    }
    .card-link:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-lg);
        border-color: var(--ocean-blue-light);
    }
    .card {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    /* --- Favorite Button Styles --- */
    .favorite-button {
        position: absolute;
        top: var(--space-sm);
        right: var(--space-sm);
        background-color: rgba(255, 255, 255, 0.75);
        border: none;
        border-radius: var(--radius-full);
        padding: var(--space-xs);
        cursor: pointer;
        z-index: 5;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-secondary);
        transition: background-color var(--transition-fast), color var(--transition-fast), transform var(--transition-fast);
        backdrop-filter: blur(3px);
    }

    .favorite-button:hover {
        background-color: rgba(255, 255, 255, 0.95);
        color: var(--sunset-orange-dark);
        transform: scale(1.1);
    }

    :global([data-theme="dark"]) .favorite-button {
        background-color: rgba(50, 50, 50, 0.75);
        color: var(--text-secondary);
    }
    :global([data-theme="dark"]) .favorite-button:hover {
        background-color: rgba(70, 70, 70, 0.95);
        color: var(--sunset-orange-light);
    }

    /* --- Card Image --- */
    .card-image {
        width: 100%;
        height: 180px;
        object-fit: cover;
        display: block;
        box-shadow: inset 0 0 5px rgba(0,0,0,0.05);
    }

    /* --- Card Content --- */
    .card-content {
        padding: var(--space-md) var(--space-lg);
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    h3 {
        margin-top: 0;
        margin-bottom: var(--space-sm);
        font-size: 1.15rem;
        color: var(--ocean-blue-dark);
        line-height: 1.3;
    }

    .badges {
        margin-bottom: var(--space-md);
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-sm);
    }

    .category-badge {
        display: inline-block;
        padding: 0.25em 0.7em;
        border-radius: var(--radius-sm);
        font-size: 0.75rem;
        font-weight: 500;
    }

    .category-badge.cuisine {
        background-color: var(--sandy-beige);
        color: var(--text-primary);
    }

    .category-badge.price {
        background-color: var(--ocean-blue-light);
        color: var(--ocean-blue-dark);
        font-weight: 600;
    }

    :global([data-theme="dark"]) .category-badge.cuisine {
        background-color: var(--sandy-beige-dark);
        color: var(--text-primary);
    }

    :global([data-theme="dark"]) .category-badge.price {
        background-color: var(--ocean-blue);
        color: white;
    }

    p {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-bottom: 0;
        line-height: 1.5;
        flex-grow: 1;
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\components\RestaurantCard.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\components\SideNav.svelte ==========

<script>
	// Importe les transitions Svelte
	import { fly, fade } from 'svelte/transition';
	// Importe le store (CORRIGÃ‰ pour utiliser $lib)
	import { isSideNavOpen } from '$lib/stores/navStore';
  
	// Importe les icÃ´nes nÃ©cessaires
	import {
	  Home, Map as MapIcon, /* RenommÃ© car Map est aussi un composant */
	  MapPin,Coffee, Calendar, Bus, Book, DollarSign, Info as InfoIcon, /* RenommÃ© car Info existe */
	  Phone, Heart, X, Settings, /* Ajout de Settings pour 'Conseils' par exemple */
	  Users, /* Pour 'About' ? */
	  Search /* Si on met la recherche ici plus tard */
	} from 'lucide-svelte';
  
	// Fonction pour fermer le menu en mettant le store Ã  false
	function closeNav() {
	  isSideNavOpen.set(false);
	}
  
	// DÃ©finition des Ã©lÃ©ments du menu (adapter les icÃ´nes et labels si besoin)
	// J'ai essayÃ© de deviner les icÃ´nes, tu peux les changer
	const navItems = [
	  { path: '/', label: 'Accueil', icon: Home },
	  { path: '/map', label: 'Carte', icon: MapIcon },
	  { path: '/places', label: 'Lieux', icon: MapPin }, // Ajoute si tu as une page liste /places
	  { path: '/restaurants', label: 'Restaurants', icon: Coffee }, // Ajoute si tu as une page liste /restaurants
	  { path: '/events', label: 'Ã‰vÃ©nements', icon: Calendar },
	  { path: '/transport', label: 'Transport', icon: Bus },
	  { path: '/phrasebook', label: 'Phrases Utiles', icon: Book },
	  { path: '/currency', label: 'Monnaie', icon: DollarSign },
	  { path: '/conseils', label: 'Conseils', icon: InfoIcon }, // Ou Settings?
	  { path: '/contacts', label: 'Contacts Utiles', icon: Phone },
	  { path: '/about', label: 'Ã€ Propos', icon: Users } // Ou InfoIcon si Conseils prend Settings?
	];
  
	// Ajouter/Retirer des liens selon tes pages rÃ©elles
  </script>
  
  <!-- Le composant SideNav n'est rendu que si $isSideNavOpen est true (gÃ©rÃ© dans +layout.svelte) -->
  <!-- Donc, pas besoin de {#if} ici, mais on garde l'overlay et la nav -->
  
  <!-- Overlay pour fermer en cliquant Ã  cÃ´tÃ© -->
  <div
	class="overlay"
	on:click={closeNav}
	transition:fade={{ duration: 200 }}
	aria-hidden="true"
  ></div>
  
  <!-- Conteneur du menu latÃ©ral -->
  <nav
	class="side-nav"
	transition:fly={{ x: -300, duration: 300, opacity: 1 }}
	aria-label="Menu principal"
  >
	<!-- EntÃªte du menu -->
	<div class="nav-header">
	  <div class="brand">
	    <img src="/assets/images/xplore-agadir-icon.png" alt="Xplore Agadir" class="nav-logo" />
	    <h2>Xplore Agadir</h2>
	  </div>
	  <button class="close-button" on:click={closeNav} aria-label="Fermer le menu">
		<X size={24} />
	  </button>
	</div>
  
	<!-- Liste des liens de navigation -->
	<ul class="nav-links" role="menu">
	  {#each navItems as { path, label, icon: Icon }}
		<li role="none">
		  <!-- Utilise on:click pour fermer le menu APRES la navigation pour mobile -->
		  <a href={path} role="menuitem" on:click={closeNav}>
			<Icon size={20} aria-hidden="true" />
			<span>{label}</span>
		  </a>
		</li>
	  {/each}
	</ul>
  </nav>
  
  
  <style>
	.overlay {
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.5);
  /* CHANGE THIS Z-INDEX */
  z-index: 1050; /* <-- Increase this value (e.g., from 150) */
}

.side-nav {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  width: 280px;
  background-color: var(--bg-primary);
  box-shadow: var(--shadow-lg);
  /* CHANGE THIS Z-INDEX */
  z-index: 1100; /* <-- Increase this value (e.g., from 200) */
  overflow-y: auto;
  display: flex;
  flex-direction: column;
}
  
	.nav-header {
	  display: flex;
	  align-items: center;
	  justify-content: space-between;
	  padding: var(--space-md);
	  background-color: var(--ocean-blue);
	  color: white;
	}

	.brand {
	  display: flex;
	  align-items: center;
	  gap: var(--space-sm);
	}

	.nav-logo {
	  width: 32px;
	  height: 32px;
	  object-fit: contain;
	}

	.nav-header h2 {
	  font-size: 1.25rem;
	  font-weight: 600;
	  margin: 0;
	  color: white;
	}

	.close-button {
	  background: none;
	  border: none;
	  color: white;
	  padding: var(--space-xs);
	  cursor: pointer;
	  transition: opacity var(--transition-fast);
	}

	.close-button:hover {
	  opacity: 0.8;
	}
  
	.nav-links {
	  list-style: none;
	  padding: var(--space-md) 0; /* Espace en haut/bas de la liste */
	  margin: 0;
	  flex-grow: 1; /* Prend l'espace restant */
	  overflow-y: auto; /* Scroll interne si besoin */
	}
  
	.nav-links li a {
	  display: flex;
	  align-items: center;
	  /* Padding vertical et horizontal */
	  padding: var(--space-md) var(--space-lg);
	  color: var(--text-primary); /* Utilise variable */
	  text-decoration: none;
	  transition: background-color var(--transition-normal), color var(--transition-normal);
	  font-weight: 500; /* Texte lÃ©gÃ¨rement plus gras */
	}
  
	.nav-links li a:hover,
	.nav-links li a:focus { /* Ajout focus pour accessibilitÃ© */
	  background-color: var(--sandy-beige-light); /* Utilise variable */
	  color: var(--ocean-blue); /* Change couleur texte au survol */
	  outline: none; /* On gÃ¨re le focus avec le fond */
	}
  
	.nav-links li a span {
	  margin-left: var(--space-md); /* Espace entre icÃ´ne et texte */
	}
  </style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\components\SideNav.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\components\WeatherWidget.svelte ==========

<script>
    import { browser } from '$app/environment';
    import { onMount } from 'svelte';
    import LoadingSpinner from '$lib/components/LoadingSpinner.svelte'; // RÃ©utilise le spinner
    import ErrorMessage from '$lib/components/ErrorMessage.svelte'; // RÃ©utilise le message d'erreur

    // --- Configuration ---
    const apiKey = import.meta.env.VITE_OPENWEATHERMAP_API_KEY;
    const lat = 30.4202; // Latitude d'Agadir
    const lon = -9.5982; // Longitude d'Agadir
    const units = 'metric'; // Pour avoir les tempÃ©ratures en Celsius
    const lang = 'fr'; // Pour avoir les descriptions en franÃ§ais

    // --- State ---
    let weatherData = null;
    let loading = true;
    let error = null;

    // --- Fetch Data ---
    async function fetchWeatherData() {
        loading = true;
        error = null;

        if (!apiKey) {
            error = "ClÃ© API OpenWeatherMap manquante dans les variables d'environnement (.env).";
            loading = false;
            console.error(error);
            return;
        }

        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=${units}&lang=${lang}`;

        try {
            const response = await fetch(apiUrl);

            if (!response.ok) {
                // GÃ¨re les erreurs HTTP (ex: 401 Unauthorized si clÃ© API invalide, 404 Not Found...)
                const errorData = await response.json().catch(() => ({ message: response.statusText })); // Essaie de lire le message d'erreur JSON
                throw new Error(`Erreur ${response.status}: ${errorData.message || response.statusText}`);
            }

            weatherData = await response.json();
            console.log("DonnÃ©es mÃ©tÃ©o reÃ§ues:", weatherData); // Pour le dÃ©bogage

        } catch (err) {
            console.error("Erreur lors de la rÃ©cupÃ©ration de la mÃ©tÃ©o:", err);
            error = `Impossible de charger la mÃ©tÃ©o : ${err.message}`;
            weatherData = null; // S'assure qu'aucune donnÃ©e partielle n'est affichÃ©e
        } finally {
            loading = false;
        }
    }

    // --- Lifecycle ---
    onMount(() => {
        // Ne fetch que cÃ´tÃ© client
        if (browser) {
            fetchWeatherData();
            // Optionnel: Mettre Ã  jour la mÃ©tÃ©o toutes les X minutes
            // setInterval(fetchWeatherData, 30 * 60 * 1000); // 30 minutes
        } else {
            // Pendant le SSR, on ne charge pas la mÃ©tÃ©o
            loading = false;
            error = "La mÃ©tÃ©o se charge cÃ´tÃ© client."; // Message informatif
        }
    });

    // --- Helpers ---
    function capitalizeFirstLetter(string) {
        if (!string) return '';
        return string.charAt(0).toUpperCase() + string.slice(1);
    }

    // GÃ©nÃ¨re l'URL de l'icÃ´ne mÃ©tÃ©o OpenWeatherMap
    $: iconUrl = weatherData?.weather?.[0]?.icon
        ? `https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`
        : null;

</script>

<div class="weather-widget">
    <h3>MÃ©tÃ©o Ã  Agadir</h3>

    {#if loading}
        <LoadingSpinner />
    {:else if error}
        <ErrorMessage message={error} />
    {:else if weatherData}
        <div class="weather-content">
            {#if iconUrl}
                <img src={iconUrl} alt={weatherData.weather[0].description || 'IcÃ´ne mÃ©tÃ©o'} class="weather-icon">
            {/if}
            <div class="weather-details">
                <span class="temperature">{Math.round(weatherData.main.temp)}Â°C</span>
                <span class="description">{capitalizeFirstLetter(weatherData.weather[0].description)}</span>
                {#if weatherData.main.feels_like}
                     <span class="feels-like">Ressenti: {Math.round(weatherData.main.feels_like)}Â°C</span>
                {/if}
            </div>
        </div>
        <p class="data-source">
            DonnÃ©es: <a href="https://openweathermap.org/" target="_blank" rel="noopener noreferrer">OpenWeatherMap</a>
        </p>
    {:else}
         <p>Impossible d'afficher la mÃ©tÃ©o pour le moment.</p>
    {/if}
</div>

<style>
    .weather-widget {
        background-color: #e7f3fe; /* Bleu trÃ¨s clair */
        border: 1px solid #bce0fd;
        border-radius: 8px;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

    h3 {
        margin-top: 0;
        margin-bottom: 1rem;
        color: #005fa3; /* Bleu un peu plus foncÃ© */
        text-align: center;
        font-size: 1.1rem;
    }

    .weather-content {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        min-height: 60px; /* Pour Ã©viter les sauts pendant le chargement */
    }

    .weather-icon {
        width: 50px;
        height: 50px;
        object-fit: contain;
        margin: 0;
    }

    .weather-details {
        display: flex;
        flex-direction: column;
        align-items: flex-start; /* Aligne Ã  gauche dans la colonne */
    }

    .temperature {
        font-size: 1.8rem;
        font-weight: bold;
        color: #333;
        line-height: 1;
    }

    .description {
        font-size: 1rem;
        color: #555;
        margin-top: 0.2rem;
    }
    .feels-like {
        font-size: 0.85rem;
        color: #777;
        margin-top: 0.2rem;
    }

    /* Centre le spinner et l'erreur s'ils s'affichent */
    .weather-widget :global(.spinner-container),
    .weather-widget :global(.error-message) {
        padding: 0.5rem; /* Moins de padding que la version standard */
        margin: 0 auto; /* Centre horizontalement */
        border: none;
        background: none;
    }
     .weather-widget :global(.error-message) {
        text-align: left; /* Garde le texte de l'erreur alignÃ© Ã  gauche */
         max-width: 90%;
         font-size: 0.9rem;
     }

    .data-source {
        text-align: center;
        font-size: 0.75rem;
        color: #888;
        margin-top: 0.8rem;
        margin-bottom: 0;
    }
    .data-source a {
        color: #666;
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\components\WeatherWidget.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\stores\favoritesStore.js ==========

// src/lib/stores/favoritesStore.js
import { writable } from 'svelte/store';
import { browser } from '$app/environment';

// The key used to store favorites in localStorage
const STORAGE_KEY = 'agadir-pwa-favorites';

/**
 * Represents a favorite item.
 * @typedef {object} FavoriteItem
 * @property {string} id - The unique ID of the place or restaurant.
 * @property {'place' | 'restaurant'} type - The type of the item.
 * @property {string} [name] - Optional: Name, could be added for easier debugging or future use
 * @property {number} [addedAt] - Optional: Timestamp when added
 */

/**
 * Function to load favorites from localStorage.
 * Ensures it only runs in the browser.
 * @returns {FavoriteItem[]} The array of favorite items.
 */
function loadFavorites() {
    if (!browser) {
        return []; // Return empty array during SSR
    }
    try {
        const storedFavorites = localStorage.getItem(STORAGE_KEY);
        if (storedFavorites) {
            // Basic validation: check if it's an array
            const parsed = JSON.parse(storedFavorites);
            return Array.isArray(parsed) ? parsed : [];
        }
    } catch (error) {
        console.error("Error loading favorites from localStorage:", error);
        // Optionally clear corrupted data: localStorage.removeItem(STORAGE_KEY);
    }
    return []; // Return empty array if nothing stored or error
}

// Create the writable store, initializing it with data from localStorage
const initialFavorites = loadFavorites();
const { subscribe, set, update } = writable(initialFavorites);

// Subscribe to store changes and update localStorage
// This ensures localStorage stays in sync with the store's state
subscribe(currentFavorites => {
    if (browser) {
        try {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(currentFavorites));
            // console.log("Favorites saved to localStorage:", currentFavorites); // For debugging
        } catch (error) {
            console.error("Error saving favorites to localStorage:", error);
        }
    }
});

/**
 * Adds an item to favorites.
 * @param {'place' | 'restaurant'} type - The type of the item.
 * @param {string} id - The ID of the item.
 * @param {string} [name] - Optional name for context.
 */
function addFavorite(type, id, name = '') {
    update(favorites => {
        // Avoid duplicates
        if (!favorites.some(fav => fav.id === id && fav.type === type)) {
            const newItem = {
                id,
                type,
                name, // Store name if provided
                addedAt: Date.now()
            };
            console.log('Adding favorite:', newItem);
            return [...favorites, newItem];
        }
        return favorites; // Return unchanged if already exists
    });
}

/**
 * Removes an item from favorites.
 * @param {'place' | 'restaurant'} type - The type of the item.
 * @param {string} id - The ID of the item.
 */
function removeFavorite(type, id) {
    update(favorites => {
         console.log('Removing favorite:', { type, id });
        return favorites.filter(fav => !(fav.id === id && fav.type === type));
    });
}

/**
 * Checks if an item is currently favorited.
 * This function is useful but often you'll check directly against the store value ($favoritesStore)
 * @param {'place' | 'restaurant'} type - The type of the item.
 * @param {string} id - The ID of the item.
 * @returns {boolean} True if the item is favorited, false otherwise.
 */
function isFavorite(type, id, currentFavorites) {
    // Pass the current store value ($favoritesStore) to this for reactivity
    return currentFavorites.some(fav => fav.id === id && fav.type === type);
}

// Export the store and the actions
export const favoritesStore = {
    subscribe,
    add: addFavorite,
    remove: removeFavorite,
    // You could directly use $favoritesStore.some(...) in components instead of exporting isFavorite
};

// You might also want to export isFavorite if you prefer that pattern,
// but remember it needs the current store value passed to it to be reactive.
// Example of reactive check in component: $: isFav = $favoritesStore.some(f => f.id === itemId && f.type === itemType)

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\stores\favoritesStore.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\stores\navStore.js ==========

// src/lib/stores/navStore.js
import { writable } from 'svelte/store';

/**
 * ContrÃ´le l'Ã©tat d'ouverture/fermeture du menu latÃ©ral (SideNav).
 * @type {import('svelte/store').Writable<boolean>}
 */
export const isSideNavOpen = writable(false); // Par dÃ©faut, le menu est fermÃ©

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\stores\navStore.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\stores\themeStore.js ==========

// src/lib/stores/themeStore.js
import { writable } from 'svelte/store';
import { browser } from '$app/environment';

// Type definition for theme values
/** @typedef {'light' | 'dark' | 'system'} Theme */

const STORAGE_KEY = 'agadir-pwa-theme';

/**
 * Gets the initial theme value to be used by the store.
 * Checks localStorage first, then defaults to 'system'.
 * 'system' allows CSS media queries to handle the initial state.
 * @returns {Theme}
 */
function getInitialTheme() {
    if (!browser) {
        return 'system'; // Default to system for SSR, CSS will handle based on media query initially
    }

    // 1. Check localStorage for a user preference ('light', 'dark', or 'system')
    const storedTheme = localStorage.getItem(STORAGE_KEY);
    if (storedTheme && (storedTheme === 'light' || storedTheme === 'dark' || storedTheme === 'system')) {
        // console.log('Theme loaded from localStorage:', storedTheme);
        return storedTheme;
    }

    // 2. If no valid theme in storage, default to 'system'
    // console.log('No valid theme in localStorage, defaulting to system.');
    return 'system';
}

// --- Store Creation ---
const initialTheme = getInitialTheme();
const theme = writable(initialTheme); // Initialize with 'light', 'dark', or 'system'

// --- Store Actions ---

/**
 * Sets the theme explicitly and updates localStorage.
 * @param {Theme} newTheme
 */
function setTheme(newTheme) {
    if (newTheme === 'light' || newTheme === 'dark' || newTheme === 'system') {
        theme.set(newTheme);
        // console.log('Theme set to:', newTheme);
    } else {
        console.warn('Invalid theme value provided:', newTheme);
    }
}

/**
 * Toggles between light and dark themes.
 * If current theme is 'system', it checks the actual system preference
 * to decide whether to switch to light or dark, saving the explicit choice.
 */
function toggleTheme() {
    theme.update(currentTheme => {
        let actualCurrentTheme = currentTheme;

        // Resolve 'system' to actual theme based on media query *before* toggling
        if (currentTheme === 'system' && browser) {
            actualCurrentTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }

        // Toggle between light and dark, overriding 'system'
        const newTheme = actualCurrentTheme === 'dark' ? 'light' : 'dark';
        // console.log('Theme toggled to:', newTheme);
        return newTheme; // Explicitly return 'light' or 'dark'
    });
}

// --- Persistence ---
// Subscribe to theme changes to save to localStorage
if (browser) {
    theme.subscribe(value => {
        try {
            // Always save the current value ('light', 'dark', or 'system')
            localStorage.setItem(STORAGE_KEY, value);
            // console.log('Theme saved to localStorage:', value);
        } catch (error) {
            console.error('Failed to save theme to localStorage:', error);
        }
    });
}


// --- Export Store and Actions ---
export const themeStore = {
    subscribe: theme.subscribe,
    set: setTheme,
    toggle: toggleTheme,
};

// --- Helper to apply theme attribute (can be called from layout) ---
/**
 * Applies the correct data-theme attribute to the document element based on the store value.
 * Handles the 'system' theme case by removing the attribute.
 * @param {Theme} currentThemeValue - The value from the themeStore ('light', 'dark', or 'system').
 */
export function applyTheme(currentThemeValue) {
    if (!browser) return;

    const root = document.documentElement;

    if (currentThemeValue === 'system') {
        // If system, let the CSS media query handle it by *removing* the attribute
        root.removeAttribute('data-theme');
        // console.log('Applying theme: system (attribute removed)');
    } else {
        // If light or dark, set the attribute explicitly
        root.setAttribute('data-theme', currentThemeValue);
        // console.log(`Applying theme attribute: data-theme="${currentThemeValue}"`);
    }
}

// --- Initialize theme attribute on first client-side load ---
// This ensures the attribute matches the initial store state
if (browser) {
    applyTheme(initialTheme);
}

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\stores\themeStore.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\index.js ==========

// place files you want to import through the `$lib` alias in this folder.


========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\index.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\lib\supabaseClient.js ==========

import { createClient } from '@supabase/supabase-js';

// RÃ©cupÃ¨re les variables d'environnement (mÃ©thode SvelteKit standard)
// Tu devras crÃ©er un fichier .env Ã  la racine du projet pour stocker ces clÃ©s
// Fichier .env (NE PAS COMMITTER CE FICHIER S'IL CONTIENT DES CLÃ‰S SECRÃˆTES)
// PUBLIC_SUPABASE_URL=TON_URL_SUPABASE
// PUBLIC_SUPABASE_ANON_KEY=TA_CLE_ANON_SUPABASE

// Utilise import.meta.env pour Vite
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

// VÃ©rification simple
if (!supabaseUrl || !supabaseAnonKey) {
  console.error("Erreur: Variables d'environnement Supabase manquantes.");
  console.error("Assurez-vous d'avoir un fichier .env avec VITE_SUPABASE_URL et VITE_SUPABASE_ANON_KEY");
  // On pourrait lancer une erreur plus formelle si on veut arrÃªter l'app
}

// CrÃ©e et exporte le client Supabase
export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Note importante sur la sÃ©curitÃ©:
// La clÃ© 'anon' est publique et conÃ§ue pour Ãªtre utilisÃ©e cÃ´tÃ© client.
// La sÃ©curitÃ© repose ENTIÃˆREMENT sur les Row Level Security (RLS) Policies
// que tu as dÃ©finies dans Supabase. Assure-toi qu'elles sont correctes !

========== FIN FICHIER: H:\my apps\agadir tourism\src\lib\supabaseClient.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\about\+page.svelte ==========

<script>
    // Pas de script nÃƒÂ©cessaire pour une page statique

     // Placeholder for hero image - replace with a real image path later
    const aboutImageUrl = '/assets/images/xplore-agadir-logo-full.png'; 
</script>

<svelte:head>
    <title>Ã€ Propos d'Agadir - Visit Agadir</title>
    <meta name="description" content="DÃ©couvrez l'histoire et les charmes de la ville d'Agadir." />
</svelte:head>

<div class="static-page-container about-page"> <!-- Add common container class -->
    <h1>Ã€ Propos d'Agadir</h1>

    <img src={aboutImageUrl} alt="Xplore Agadir Logo" class="about-logo-img" />

    <section>
        <p>
            Agadir, capitale de la rÃ©gion Souss-Massa, est l'une des principales destinations touristiques du Maroc. Reconnue pour sa magnifique baie, sa longue plage de sable fin et son climat agrÃ©able toute l'annÃ©e, la ville offre un mÃ©lange unique de modernitÃ© et de traditions.
        </p>
    </section>

    <section>
        <h2>Une Ville Reconstruite</h2>
        <p>
            Tragiquement dÃ©truite par un tremblement de terre dÃ©vastateur en 1960, Agadir a Ã©tÃ© entiÃ¨rement reconstruite un peu plus au sud de l'Ã©picentre. Cette reconstruction a donnÃ© naissance Ã  une ville moderne, aux larges avenues et Ã  l'architecture contemporaine, tout en prÃ©servant l'esprit chaleureux marocain. Les ruines de l'ancienne Kasbah d'Agadir Oufella, perchÃ©es sur une colline, tÃ©moignent de ce passÃ© et offrent un panorama spectaculaire sur la ville nouvelle et l'ocÃ©an Atlantique.
        </p>
    </section>

    <section>
        <h2>Attractions et ActivitÃ©s</h2>
        <p>
            Aujourd'hui, Agadir attire les visiteurs par sa plage animÃ©e, idÃ©ale pour la dÃ©tente et les sports nautiques. La Marina moderne propose des restaurants, des cafÃ©s et des boutiques. Le Souk El Had, l'un des plus grands marchÃ©s du Maroc, est une Ã©tape incontournable pour s'immerger dans les couleurs, les senteurs et l'artisanat local. Les environs d'Agadir offrent Ã©galement des possibilitÃ©s d'excursions vers la VallÃ©e du Paradis, les plages de Taghazout (rÃ©putÃ©es pour le surf) ou le Parc National de Souss-Massa.
        </p>
    </section>

    <section>
         <h2>Culture et HospitalitÃ©</h2>
        <p>
            Agadir est aussi un carrefour de la culture Amazigh (berbÃ¨re), dont vous pourrez dÃ©couvrir les richesses au MusÃ©e du Patrimoine Amazigh. L'hospitalitÃ© lÃ©gendaire des habitants d'Agadir rendra votre sÃ©jour encore plus mÃ©morable.
        </p>
    </section>

    <section class="closing-section">
        <p>
            Cette application a pour but de vous aider Ã  dÃ©couvrir les trÃ©sors de notre belle ville. Bon sÃ©jour Ã  Agadir !
        </p>
    </section>

</div>

<style>
    /* Common styles for static pages could eventually be global */
    .static-page-container {
        max-width: 850px; /* Limit width for readability */
        margin: 0 auto; /* Center */
        padding: var(--space-md) 0 var(--space-xxl); /* Vertical padding, no horizontal (let parent handle) */
    }

    h1 {
        color: var(--ocean-blue-dark);
        text-align: center;
        margin-bottom: var(--space-xl);
    }

    .about-logo-img {
        display: block;
        max-width: 300px;
        height: auto;
        margin: var(--space-lg) auto var(--space-xl);
    }

    section {
        margin-bottom: var(--space-lg); /* Space between text sections */
    }

    h2 {
        color: var(--ocean-blue); /* Use primary color for subtitles */
        margin-top: var(--space-xl); /* More space above H2 */
        margin-bottom: var(--space-md);
        font-size: 1.6rem;
        border-bottom: 1px solid var(--sandy-beige-dark); /* Use theme border color */
        padding-bottom: var(--space-sm);
    }

    p {
        margin-bottom: var(--space-md);
        color: var(--text-primary); /* Use theme text color */
        line-height: 1.8; /* Improve readability */
        text-align: justify; /* Justify text */
    }

    .closing-section p {
        text-align: center; /* Center the final paragraph */
        font-style: italic;
        color: var(--text-secondary);
        margin-top: var(--space-xl);
    }

    /* Remove old specific styles if they conflict */
    /* Example: Remove background-color, padding from .about-page if handled by .static-page-container */
     .about-page {
         /* Specific styles for about page if needed, otherwise remove */
     }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\about\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\conseils\+page.svelte ==========

<script>
  // No script needed
</script>

<svelte:head>
  <title>Conseils aux Voyageurs - Agadir</title>
  <meta name="description" content="Conseils pratiques pour votre sÃ©jour Ã  Agadir : sÃ©curitÃ©, santÃ©, pourboires, marchandage, culture locale et plus." />
</svelte:head>

<div class="static-page-container conseils-page"> <!-- Add common container class -->
  <h1>Conseils aux Voyageurs</h1>
  <p class="intro-paragraph">Quelques recommandations pour profiter pleinement et sereinement de votre sÃ©jour Ã  Agadir.</p>

  <section>
    <h2><span class="icon">ðŸ›¡ï¸</span> SÃ©curitÃ© GÃ©nÃ©rale</h2>
    <ul>
      <li>Agadir est gÃ©nÃ©ralement une ville sÃ»re, mais comme partout, restez vigilant, surtout dans les zones trÃ¨s frÃ©quentÃ©es (souks, plages).</li>
      <li>Gardez un Å“il sur vos effets personnels (sacs, tÃ©lÃ©phones, appareils photo). Ã‰vitez d'exhiber des objets de valeur de maniÃ¨re ostentatoire.</li>
      <li>Utilisez les coffres-forts des hÃ´tels pour vos documents importants (passeports) et grosses sommes d'argent. Gardez une copie de vos papiers sur vous ou en ligne.</li>
      <li>Le soir, privilÃ©giez les rues bien Ã©clairÃ©es et animÃ©es. Si vous sortez tard, prenez un taxi officiel.</li>
      <li>NumÃ©ros d'urgence : Police (19), Pompiers/Ambulance (15). Voir la page <a href="/contacts">Contacts</a> pour plus de dÃ©tails.</li>
    </ul>
  </section>

  <section>
    <h2><span class="icon">ðŸ’§</span> SantÃ© et HygiÃ¨ne</h2>
    <ul>
      <li>Buvez de prÃ©fÃ©rence de l'eau en bouteille capsulÃ©e, facilement disponible partout. Ã‰vitez l'eau du robinet pour la boisson.</li>
      <li>Lavez-vous frÃ©quemment les mains, surtout avant de manger.</li>
      <li>Soyez prudent avec les aliments crus ou peu cuits achetÃ©s dans la rue si vous avez un estomac sensible. PrivilÃ©giez les restaurants et stands qui semblent propres et frÃ©quentÃ©s.</li>
      <li>ProtÃ©gez-vous du soleil : crÃ¨me solaire Ã  indice Ã©levÃ©, chapeau, lunettes de soleil, surtout entre 11h et 16h. Hydratez-vous bien.</li>
      <li>Une petite trousse Ã  pharmacie de base (pansements, dÃ©sinfectant, anti-douleurs, anti-diarrhÃ©ique) peut Ãªtre utile. Des pharmacies (reconnaissables Ã  leur croix verte) sont nombreuses en ville.</li>
    </ul>
  </section>

  <section>
    <h2><span class="icon">ðŸ’°</span> Argent et Pourboires</h2>
    <ul>
      <li>La monnaie est le Dirham Marocain (MAD). Voir la page <a href="/currency">Monnaie</a> pour les dÃ©tails et le convertisseur.</li>
      <li>Le pourboire ("bakchich") fait partie de la culture locale pour les petits services rendus. Il n'est pas obligatoire mais apprÃ©ciÃ©.</li>
      <li>Quelques indications (variables) : 1-2 Dh pour un gardien de parking, 5-10 Dh pour un bagagiste Ã  l'hÃ´tel, 5-10% de la note dans les restaurants si le service n'est pas inclus. Pour les guides, cela dÃ©pend de la durÃ©e et de la qualitÃ© (demandez conseil si besoin).</li>
      <li>Ayez toujours un peu de monnaie (piÃ¨ces et petits billets) sur vous pour ces occasions.</li>
    </ul>
  </section>

  <section>
    <h2><span class="icon">ðŸ¤</span> Marchandage et Achats</h2>
    <ul>
      <li>Le marchandage est courant dans les souks et certains petits magasins d'artisanat, mais pas dans les magasins modernes Ã  prix fixes, les supermarchÃ©s ou la plupart des restaurants.</li>
      <li>ConsidÃ©rez-le comme un jeu social plutÃ´t qu'une confrontation. Gardez le sourire !</li>
      <li>Ayez une idÃ©e du prix que vous Ãªtes prÃªt Ã  payer avant de commencer. Le premier prix annoncÃ© est souvent une base de nÃ©gociation.</li>
      <li>Si vous n'Ãªtes pas intÃ©ressÃ©, un "La, shukran" (Non, merci) poli suffit gÃ©nÃ©ralement.</li>
      <li>Ne vous sentez jamais obligÃ© d'acheter aprÃ¨s avoir nÃ©gociÃ©.</li>
    </ul>
  </section>

   <section>
    <h2><span class="icon">ðŸ“¸</span> Photos et Respect Culturel</h2>
    <ul>
      <li>Demandez toujours la permission avant de prendre des personnes en photo, en particulier les femmes et les enfants. Certains peuvent refuser ou demander une petite rÃ©tribution (surtout les artistes de rue, porteurs d'eau, etc.).</li>
      <li>Habillez-vous de maniÃ¨re respectueuse, surtout si vous visitez des zones moins touristiques ou des lieux religieux (quand la visite est autorisÃ©e aux non-musulmans, ce qui est rare pour l'intÃ©rieur des mosquÃ©es au Maroc, sauf exceptions comme la MosquÃ©e Hassan II Ã  Casablanca). Pour Agadir, une tenue de plage est normale sur le front de mer, mais une tenue plus couvrante (Ã©paules et genoux couverts) est apprÃ©ciÃ©e en ville ou dans les villages alentour.</li>
      <li>Pendant le mois de Ramadan, soyez discret si vous mangez, buvez ou fumez en public pendant les heures de jeÃ»ne.</li>
      <li>Apprendre quelques mots de base en Darija (voir <a href="/phrasebook">Guide de Conversation</a>) sera trÃ¨s apprÃ©ciÃ©.</li>
    </ul>
  </section>

   <section>
    <h2><span class="icon">ðŸ”Œ</span> Divers</h2>
    <ul>
      <li>Le courant Ã©lectrique est de 220V, les prises sont de type europÃ©en (Type C/E). Apportez un adaptateur si nÃ©cessaire.</li>
      <li>Le week-end au Maroc est le samedi et le dimanche. Les administrations sont souvent fermÃ©es.</li>
      <li>La langue officielle est l'Arabe et l'Amazigh. Le FranÃ§ais est trÃ¨s rÃ©pandu dans le tourisme et les affaires. L'Anglais est de plus en plus parlÃ© dans les zones touristiques.</li>
      <li>Profitez de l'hospitalitÃ© marocaine, elle est lÃ©gendaire !</li>
    </ul>
  </section>

  <p class="important-note">
    Ces conseils sont gÃ©nÃ©raux. N'hÃ©sitez pas Ã  demander plus d'informations Ã  votre hÃ´tel ou Ã  l'Office du Tourisme. Excellent sÃ©jour Ã  Agadir !
  </p>

</div>

<style>
  /* Common static page styles */
  .static-page-container {
      max-width: 850px;
      margin: 0 auto;
      padding: var(--space-md) 0 var(--space-xxl);
      line-height: 1.7; /* Base line height */
  }

  h1 {
      color: var(--ocean-blue-dark);
      text-align: center;
      margin-bottom: var(--space-lg);
  }

  .intro-paragraph {
      text-align: center;
      color: var(--text-secondary);
      margin-bottom: var(--space-xl);
      font-size: 1.1rem;
  }

  section {
      margin-bottom: var(--space-xl); /* More space between sections */
      padding: var(--space-lg); /* Add padding inside sections */
      background-color: var(--bg-secondary); /* Light background for sections */
      border-radius: var(--radius-md);
      border: 1px solid var(--sandy-beige-light); /* Lighter border */
  }

  h2 {
      color: var(--ocean-blue);
      margin-top: 0;
      margin-bottom: var(--space-md);
      font-size: 1.4rem;
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      padding-bottom: var(--space-sm);
      border-bottom: 1px solid var(--sandy-beige-dark);
  }

  h2 .icon {
     font-size: 1.3em;
     line-height: 1; /* Adjust icon vertical alignment */
  }

  p { /* Default paragraph style inside sections */
    margin-bottom: var(--space-md);
    color: var(--text-primary);
  }

  ul {
    margin-left: 0;
    padding-left: var(--space-lg); /* Indent list items */
    list-style: disc;
    margin-bottom: var(--space-sm); /* Reduce margin below list */
    color: var(--text-primary); /* Ensure list text color */
  }

  li {
    margin-bottom: var(--space-md); /* Space between list items */
  }

   li a {
     color: var(--ocean-blue); /* Use theme link color */
     font-weight: 500;
   }
   li a:hover {
     color: var(--ocean-blue-dark);
     text-decoration: underline;
   }

  .important-note {
    margin-top: var(--space-xl);
    font-size: 0.9em;
    color: var(--text-secondary);
    background-color: var(--sandy-beige-light);
    border-left: 4px solid var(--ocean-blue); /* Use theme accent color */
    padding: var(--space-md);
    border-radius: var(--radius-sm);
    text-align: left; /* Align text left */
  }

   /* Remove potential conflicts from old styles */
   .conseils-page { }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\conseils\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\contacts\+page.svelte ==========

<script>
    // No script needed
</script>

<svelte:head>
    <title>Contacts d'Urgence - Visit Agadir</title>
    <meta name="description" content="NumÃ©ros de tÃ©lÃ©phone importants et contacts d'urgence Ã  Agadir." />
</svelte:head>

<div class="static-page-container contacts-page"> <!-- Add common container class -->
    <h1>Contacts d'Urgence Ã  Agadir</h1>
    <p class="intro-paragraph">Voici quelques numÃ©ros utiles en cas de besoin pendant votre sÃ©jour.</p>

    <ul class="contacts-list">
        <li>
            <span class="contact-name">Police (SÃ»retÃ© Nationale)</span>
            <span class="contact-number">
                <a href="tel:19" title="Appeler la Police">19</a>
            </span>
        </li>
         <li>
            <span class="contact-name">Gendarmerie Royale (Hors zone urbaine)</span>
            <span class="contact-number">
                <a href="tel:177" title="Appeler la Gendarmerie">177</a>
            </span>
        </li>
        <li>
            <span class="contact-name">Pompiers (Protection Civile)</span>
            <span class="contact-number">
                <a href="tel:15" title="Appeler les Pompiers">15</a>
            </span>
        </li>
         <li>
            <span class="contact-name">Ambulance / SAMU</span>
            <span class="contact-number">
                 <a href="tel:150" title="Appeler une Ambulance">150</a>
            </span>
        </li>
         <li>
            <span class="contact-name">Police Touristique Agadir</span>
            <span class="contact-number">
                <a href="tel:+212528840912" title="Appeler la Police Touristique">05 28 84 09 12</a>
                 <span class="note">(NumÃ©ro exemple, Ã  vÃ©rifier)</span>
            </span>
        </li>
         <li>
            <span class="contact-name">Renseignements TÃ©lÃ©phoniques</span>
            <span class="contact-number">
                <a href="tel:160" title="Appeler les Renseignements">160</a>
            </span>
        </li>
        <!-- Add more contacts if needed -->
    </ul>

    <p class="important-note">
        <strong>Note :</strong> Pour appeler depuis un numÃ©ro Ã©tranger, composez l'indicatif du Maroc (+212) et supprimez le premier '0' du numÃ©ro local (si applicable). VÃ©rifiez toujours ces numÃ©ros auprÃ¨s de sources officielles car ils peuvent changer.
    </p>
</div>

<style>
    /* Common static page styles */
    .static-page-container {
        max-width: 800px; /* Slightly narrower for contacts */
        margin: 0 auto;
        padding: var(--space-md) 0 var(--space-xxl);
    }

    h1 {
        color: var(--sunset-orange-dark); /* Use accent color for urgency */
        text-align: center;
        margin-bottom: var(--space-lg);
        border-bottom: 2px solid var(--sunset-orange); /* Accent border */
        padding-bottom: var(--space-sm);
    }

     .intro-paragraph {
        text-align: center;
        color: var(--text-secondary);
        margin-bottom: var(--space-xl);
    }

    .contacts-list {
        list-style: none;
        padding: 0;
        margin: var(--space-xl) 0; /* More vertical margin */
        background-color: var(--bg-secondary); /* Light background for list */
        border-radius: var(--radius-md);
        border: 1px solid var(--border-color);
        overflow: hidden; /* Clip borders */
    }

    .contacts-list li {
        display: flex;
        flex-wrap: wrap; /* Allow wrapping on small screens */
        justify-content: space-between;
        align-items: center;
        gap: var(--space-md); /* Gap between name and number */
        padding: var(--space-md) var(--space-lg); /* Padding inside items */
        border-bottom: 1px solid var(--sandy-beige-light); /* Lighter separator */
    }

    .contacts-list li:last-child {
        border-bottom: none;
    }

    .contact-name {
        font-weight: 600; /* Bolder name */
        color: var(--text-primary);
        flex-basis: 50%; /* Give name more space initially */
        flex-grow: 1;
    }

    .contact-number {
        display: flex;
        align-items: center;
        gap: var(--space-sm);
        flex-shrink: 0; /* Prevent number shrinking too much */
    }

    .contact-number a {
        font-size: 1.2em;
        font-weight: 700;
        color: var(--ocean-blue);
        text-decoration: none;
        background-color: var(--ocean-blue-light);
        color: white;
        padding: var(--space-xs) var(--space-md);
        border-radius: var(--radius-sm);
        transition: background-color 0.2s;
        white-space: nowrap; /* Prevent number wrapping */
    }

    .contact-number a:hover {
        background-color: var(--ocean-blue-dark);
        text-decoration: none;
    }

     .contact-number .note {
        font-size: 0.8em;
        color: var(--text-secondary);
        font-style: italic;
     }


    .important-note {
        margin-top: var(--space-xl);
        font-size: 0.9em;
        color: var(--text-secondary);
        background-color: var(--sandy-beige-light);
        border-left: 4px solid var(--sunset-orange); /* Match H1 border color */
        padding: var(--space-md);
        border-radius: var(--radius-sm);
    }

     /* Remove potential conflicts */
     .contacts-page {}
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\contacts\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\currency\+page.svelte ==========

<script lang="ts">
    // --- KEEP YOUR EXISTING SCRIPT BLOCK ---
    import { onMount } from 'svelte';
    import { browser } from '$app/environment'; // Needed if not already imported

    const apiKey = import.meta.env.VITE_EXCHANGERATE_API_KEY;
    const apiUrlBase = `https://v6.exchangerate-api.com/v6/${apiKey}/latest/`;

    let amount: number | null = 100;
    let fromCurrency: string = 'EUR';
    const toCurrency: string = 'MAD';
    let rates: Record<string, number> | null = null;
    let convertedAmount: string | null = null;
    let isLoading: boolean = true;
    let error: string | null = null;
    let lastUpdate: string | null = null;

    const supportedCurrencies: string[] = ['EUR', 'USD', 'GBP', 'CAD', 'CHF'];

    async function fetchRates(): Promise<void> {
         if (!browser) { isLoading = false; return; } // Don't fetch on server

         isLoading = true;
         error = null;
         rates = null;
         convertedAmount = null;

         if (!apiKey) {
             error = "ClÃ© API manquante. VÃ©rifiez la configuration (.env)";
             isLoading = false;
             console.error("ClÃ© API non trouvÃ©e dans .env");
             return;
         }

         const apiUrl = `${apiUrlBase}EUR`; // Using EUR as base

         try {
             const response = await fetch(apiUrl);
             if (!response.ok) {
                 const errorData = await response.json().catch(() => ({}));
                 throw new Error(`Erreur API (${response.status}): ${errorData['error-type'] || response.statusText || 'Erreur inconnue'}`);
             }
             const data = await response.json();

             if (data.result === 'success') {
                 rates = data.conversion_rates;
                 lastUpdate = new Date(data.time_last_update_utc).toLocaleString('fr-FR', { dateStyle: 'medium', timeStyle: 'short'});
                 calculateConversion();
             } else {
                 throw new Error(data['error-type'] || 'Erreur lors de la rÃ©cupÃ©ration des taux.');
             }
         } catch (err) {
             if (err instanceof Error) { error = `Impossible de charger les taux: ${err.message}`; }
             else { error = `Impossible de charger les taux: Erreur inconnue (${String(err)})`; }
             rates = null;
         } finally {
             isLoading = false;
         }
     }

    function calculateConversion(): void {
         if (rates && amount !== null && fromCurrency) {
             const rateFrom = rates[fromCurrency];
             const rateTo = rates[toCurrency];

             if (rateFrom && rateTo) {
                  const amountInBase = fromCurrency === 'EUR' ? parseFloat(String(amount)) : parseFloat(String(amount)) / rateFrom;
                  if (!isNaN(amountInBase)) {
                     convertedAmount = (amountInBase * rateTo).toFixed(2);
                  } else { convertedAmount = 'N/A'; }
             } else { convertedAmount = 'N/A'; }
         } else { convertedAmount = null; }
     }

    onMount(fetchRates);

    $: if (browser && amount !== null && fromCurrency && rates && !isLoading) calculateConversion();

</script>

<svelte:head>
    <title>Monnaie, Change & Convertisseur - Agadir</title>
    <meta name="description" content="Informations sur le Dirham marocain (MAD), taux de change, convertisseur de devises et oÃ¹ changer de l'argent Ã  Agadir." />
</svelte:head>

<div class="static-page-container currency-page"> <!-- Add common container class -->

    <h1>Monnaie Marocaine & Change</h1>

    <!-- SECTION: Convertisseur de Devises -->
    <section class="converter-section content-section"> <!-- Add content-section class -->
        <h2>Convertisseur Rapide (vers MAD)</h2>

        {#if isLoading && !rates}
            <div class="loading-message">Chargement des taux de change...</div>
        {:else if error}
            <div class="error-message">{error}</div>
        {:else if rates}
            <div class="converter-form">
                <div class="input-group">
                    <label for="amount">Montant :</label>
                    <input type="text" inputmode="decimal" pattern="[0-9]*[.,]?[0-9]*" id="amount" bind:value={amount} placeholder="Montant">
                </div>
                <div class="input-group">
                    <label for="fromCurrency">De :</label>
                    <select id="fromCurrency" bind:value={fromCurrency}>
                        {#each supportedCurrencies as currency}
                            <option value={currency}>{currency}</option>
                        {/each}
                    </select>
                </div>
                <div class="result-group">
                    <span>â‰ˆ</span>
                    <span class="converted-value">{convertedAmount ?? (isLoading ? '...' : 'N/A')}</span>
                    <span>{toCurrency}</span>
                </div>
            </div>
            {#if lastUpdate}
                 <p class="update-info">Taux indicatifs mis Ã  jour le : {lastUpdate} (Source: ExchangeRate-API)</p>
            {/if}
        {:else}
             <div class="error-message">Impossible d'afficher le convertisseur.</div>
        {/if}
    </section>
    <!-- FIN SECTION Convertisseur -->

    <section class="content-section"> <!-- Add content-section class -->
        <h2>Le Dirham Marocain (MAD)</h2>
        <p>
            La monnaie officielle du Maroc est le <strong>Dirham marocain</strong>, souvent abrÃ©gÃ© en <strong>MAD</strong> ou <strong>Dh</strong>. Un Dirham est divisÃ© en 100 centimes.
        </p>
        <p>
            Vous trouverez des piÃ¨ces de 1, 5, 10, 20, 50 centimes et de 1, 2, 5, 10 Dirhams. Les billets les plus courants sont ceux de 20, 50, 100 et 200 Dirhams.
        </p>
        <p class="important-note" style="margin-top: var(--space-sm);"> <!-- Style inline for margin adjustment -->
            <strong>Important :</strong> Le Dirham marocain est une monnaie non convertible en dehors du Maroc. Il est illÃ©gal d'importer ou d'exporter des Dirhams en grande quantitÃ©. Vous devrez donc changer votre argent Ã  votre arrivÃ©e et rechanger les Dirhams restants (sur prÃ©sentation du bordereau de change initial) avant votre dÃ©part.
        </p>
    </section>

    <!-- Removed static rates list as converter is primary -->

    <section class="content-section"> <!-- Add content-section class -->
        <h2>OÃ¹ Changer de l'Argent Ã  Agadir ?</h2>
        <p>Plusieurs options s'offrent Ã  vous pour changer vos devises en Dirhams :</p>
        <ul>
            <li>
                <strong>AÃ©roport d'Agadir Al Massira :</strong> Bureaux de change disponibles Ã  l'arrivÃ©e (taux parfois moins favorables).
            </li>
            <li>
                <strong>Banques :</strong> Agences en ville (Attijariwafa, BMCE, Banque Populaire...) offrant des taux officiels (horaires limitÃ©s).
            </li>
            <li>
                <strong>Bureaux de Change AgrÃ©Ã©s :</strong> Nombreux en zones touristiques, taux compÃ©titifs et horaires Ã©tendus. Comparez les taux affichÃ©s.
             </li>
             <li>
                <strong>Distributeurs Automatiques (DAB / ATM) :</strong> Option simple avec cartes internationales (Visa, Mastercard). VÃ©rifiez les frais de votre banque.
            </li>
            <li>
                <strong>HÃ´tels :</strong> Service de change souvent disponible, mais taux gÃ©nÃ©ralement moins avantageux.
            </li>
        </ul>
    </section>

     <section class="content-section"> <!-- Add content-section class -->
        <h2>Conseils Pratiques</h2>
        <ul>
            <li><strong>Comparez les taux :</strong> Surtout pour de grosses sommes. Les taux dans les bureaux peuvent lÃ©gÃ¨rement diffÃ©rer des taux interbancaires (commissions).</li>
            <li><strong>Gardez le bordereau :</strong> Conservez le reÃ§u de change pour pouvoir rechanger vos Dirhams restants au dÃ©part.</li>
            <li><strong>Pas de change "au noir" :</strong> Ã‰vitez le change illÃ©gal dans la rue.</li>
            <li><strong>Ayez du liquide :</strong> Utile pour petits commerces, souks, taxis, etc., mÃªme si les cartes sont de plus en plus acceptÃ©es.</li>
             <li><strong>PrÃ©venez votre banque :</strong> Informez votre banque de votre voyage pour Ã©viter le blocage de vos cartes.</li>
        </ul>
    </section>

</div>

<style>
    /* Common static page styles */
    .static-page-container {
        max-width: 850px;
        margin: 0 auto;
        padding: var(--space-md) 0 var(--space-xxl);
         line-height: 1.7;
    }
    h1 {
        color: var(--ocean-blue-dark);
        text-align: center;
        margin-bottom: var(--space-xl);
    }

    /* Common section style - BUT WE WILL REMOVE BG for most sections on THIS page */
    .content-section {
        margin-bottom: var(--space-xl);
        /* Remove background/padding/border by default for this page, apply ONLY to converter */
        /* background-color: var(--bg-secondary); */
        /* padding: var(--space-lg); */
        /* border-radius: var(--radius-md); */
        /* border: 1px solid var(--sandy-beige-light); */
    }
     .content-section h2 { /* Styles for H2 inside sections */
        color: var(--ocean-blue);
        margin-top: 0;
        margin-bottom: var(--space-md);
        font-size: 1.4rem;
        padding-bottom: var(--space-sm);
        border-bottom: 1px solid var(--sandy-beige-dark);
    }

    p { /* Default paragraph */
        margin-bottom: var(--space-md);
        color: var(--text-primary);
    }
    strong { font-weight: 600; color: inherit; }

     ul {
         margin-left: 0;
         padding-left: var(--space-lg);
         list-style: disc;
         margin-bottom: 0;
     }
     li { margin-bottom: var(--space-md); }
     li strong { font-weight: 600; }

     .important-note {
         font-size: 0.9em;
         color: var(--text-secondary);
         background-color: var(--sandy-beige-light);
         border-left: 4px solid var(--ocean-blue);
         padding: var(--space-md);
         border-radius: var(--radius-sm);
         margin-top: var(--space-lg); /* Added margin-top */
     }

    /* --- Converter specific styles --- */
    .converter-section {
        /* Apply the section styling ONLY to the converter */
         padding: var(--space-lg);
         border-radius: var(--radius-md);
         background-color: var(--bg-secondary); /* Use standard secondary background */
         border: 1px solid var(--border-color); /* Use standard border */
    }
    .converter-section h2 {
         color: var(--ocean-blue-dark);
         text-align: center;
         border: none;
         font-size: 1.6rem;
         margin-bottom: var(--space-xl); /* More space below title */
    }

    .converter-form {
        display: flex;
        flex-wrap: wrap;
        align-items: flex-end; /* Align items bottom for better label alignment */
        justify-content: center;
        gap: var(--space-lg);
        margin-bottom: var(--space-md);
    }

    .input-group {
        display: flex;
        flex-direction: column; /* Stack label and input */
        gap: var(--space-xs); /* Small gap between label and input */
    }
     .input-group label {
        font-weight: 500;
        color: var(--text-primary);
        font-size: 0.9rem; /* Smaller label */
        text-align: left; /* Align label text left */
        width: 100%; /* Ensure label takes width */
    }
    .input-group input[type="text"], .input-group select {
         padding: var(--space-sm) var(--space-md);
         border: 1px solid var(--sandy-beige-dark);
         border-radius: var(--radius-sm);
         font-size: 1rem;
         /* Set a consistent width */
         width: 150px;
         background-color: var(--bg-primary);
         color: var(--text-primary);
         box-sizing: border-box; /* Include padding/border in width */
    }

    .result-group {
         display: flex;
         align-items: center; /* Center items vertically */
         gap: var(--space-sm);
         padding-bottom: calc(var(--space-sm) + 1px); /* Align bottom roughly with inputs */
    }
     .result-group span:first-child { /* The â‰ˆ symbol */
         font-size: 1.5rem; /* Make symbol larger */
         color: var(--text-secondary);
         padding-right: var(--space-xs);
     }
    .result-group .converted-value {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--ocean-blue-dark);
        background-color: var(--bg-primary);
        padding: calc(var(--space-sm) + 2px) var(--space-md); /* Match input height better */
        border-radius: var(--radius-sm);
        border: 1px solid var(--sandy-beige-dark);
        min-width: 150px; /* Match input width */
        display: inline-block;
        text-align: right;
        box-sizing: border-box;
    }
     .result-group span:last-child { /* The "MAD" text */
         font-size: 1rem;
         font-weight: 500;
         color: var(--text-secondary);
     }

    .update-info {
        font-size: 0.85rem;
        color: var(--text-secondary); /* Make slightly darker for better contrast */
        text-align: center;
        margin-top: var(--space-lg);
        margin-bottom: 0;
        width: 100%; /* Ensure it takes full width in flex */
    }

     /* Loading / Error messages - keep as is, they are standard */
     .loading-message, .error-message {
        text-align: center;
        padding: var(--space-md);
        border-radius: var(--radius-sm);
        margin: var(--space-md) auto;
        max-width: 90%;
     }
     .loading-message {
         color: var(--ocean-blue-dark);
         background-color: var(--ocean-blue-light);
         border: 1px solid var(--ocean-blue);
     }
     .error-message {
        color: #721c24;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        font-weight: 500;
     }

     /* Remove potential conflicts */
     .currency-page {}
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\currency\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\events\+page.js ==========

import { supabase } from '$lib/supabaseClient';
import { error } from '@sveltejs/kit';

export async function load() {
    console.log("Chargement des Ã©vÃ©nements...");

    // Date actuelle pour filtrer les Ã©vÃ©nements passÃ©s
    const now = new Date().toISOString();

    try {
        // MODIFIÃ‰ : Ajout de ticket_url et place_id dans le select
        const { data: events, error: eventsError } = await supabase
            .from('events')
            // SÃ©lectionne toutes les colonnes existantes + les nouvelles
            .select('*, place_id, ticket_url')
            // Filtre pour les Ã©vÃ©nements futurs ou en cours (mÃªme logique qu'avant)
            .or(`end_date.gte.${now},and(end_date.is.null,start_date.gte.${now}),and(start_date.lte.${now},end_date.gte.${now})`)
            .order('start_date', { ascending: true }); // Trie par date de dÃ©but

        if (eventsError) {
            throw eventsError;
        }

        console.log("Ã‰vÃ©nements chargÃ©s (avec place_id et ticket_url):", events);
        return {
            events: events || []
        };

    } catch (err) {
        console.error("Erreur lors du chargement des Ã©vÃ©nements:", err.message);
        // S'assurer de retourner une structure de donnÃ©es vide en cas d'erreur pour que la page ne plante pas
        // throw error(500, `Impossible de charger les Ã©vÃ©nements: ${err.message}`); // On pourrait aussi faire Ã§a
         return {
             events: [],
             error: `Impossible de charger les Ã©vÃ©nements: ${err.message}` // On passe l'erreur Ã  la page
         };
    }
}

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\events\+page.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\events\+page.svelte ==========

<script lang="ts">
    import LoadingSpinner from '$lib/components/LoadingSpinner.svelte';
    import ErrorMessage from '$lib/components/ErrorMessage.svelte';
    import { ExternalLink, MapPin } from 'lucide-svelte'; // Added MapPin icon
    import { navigating } from '$app/stores'; // For loading state
    import { fly } from 'svelte/transition';

    export let data;
    $: events = data?.events || [];
    $: pageError = data?.error;
    $: isLoading = !data || ($navigating && $navigating.to?.route.id === '/events'); // Show loading initially or during navigation

    const defaultImage = '/assets/images/default-placeholder.jpg'; // Default event image

    function formatEventDate(startDate: string | null | undefined, endDate: string | null | undefined): string {
        if (!startDate) return "Date inconnue";

        const start = new Date(startDate);
        // Simplified options for brevity on card
        const dateOptions: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };
        const shortDateOptions: Intl.DateTimeFormatOptions = { month: 'short', day: 'numeric' }; // For multi-day
        const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: false }; // Use 24h format
        const startFormattedDate = start.toLocaleDateString('fr-FR', dateOptions);
        const startFormattedTime = start.toLocaleTimeString('fr-FR', timeOptions);

        if (!endDate) {
            return `Le ${startFormattedDate} Ã  ${startFormattedTime}`;
        }

        const end = new Date(endDate);
        const endFormattedTime = end.toLocaleTimeString('fr-FR', timeOptions);

        if (start.toDateString() === end.toDateString()) {
             // Same day event
            return `Le ${startFormattedDate}, de ${startFormattedTime} Ã  ${endFormattedTime}`;
        } else {
            // Multi-day event
            const startShort = start.toLocaleDateString('fr-FR', shortDateOptions);
            const endShort = end.toLocaleDateString('fr-FR', shortDateOptions);
            // Check if same year for cleaner display (optional)
            if (start.getFullYear() === end.getFullYear()) {
                 return `Du ${startShort} au ${endShort} ${start.getFullYear()}`;
            } else {
                 return `Du ${startFormattedDate} au ${end.toLocaleDateString('fr-FR', dateOptions)}`;
            }
        }
    }

    function handleImageError(event: Event) {
        const imgElement = event.target as HTMLImageElement;
        if (imgElement) {
            imgElement.onerror = null;
            imgElement.src = defaultImage;
        }
    }
</script>

<svelte:head>
    <title>Ã‰vÃ©nements Ã  Agadir - Visit Agadir</title>
    <meta name="description" content="DÃ©couvrez les prochains Ã©vÃ©nements, festivals, marchÃ©s et concerts Ã  Agadir." />
</svelte:head>

<div class="list-page-container"> <!-- Re-use list page container style -->
    <h1>Ã‰vÃ©nements Ã  Venir</h1>

    {#if isLoading}
        <LoadingSpinner />
    {:else if pageError}
        <ErrorMessage message={pageError} />
    {:else if events.length > 0}
         <p>Restez informÃ© des activitÃ©s et manifestations prÃ©vues Ã  Agadir.</p>
        <ul class="events-list">
            {#each events as event, index (event.id)}
                <li class="event-card" in:fly="{{ y: 20, duration: 300, delay: index * 50 }}">
                    <img
                        src={event.image_url || defaultImage}
                        alt="Image pour {event.name}"
                        class="event-image"
                        loading="lazy"
                        on:error={handleImageError}
                    />
                    <div class="event-details">
                        <h2>{event.name}</h2>

                         <!-- Meta Info (Date, Category) -->
                         <div class="event-meta">
                            {#if event.category}
                                <span class="category-badge">{event.category}</span>
                            {/if}
                            <span class="event-date">{formatEventDate(event.start_date, event.end_date)}</span>
                         </div>

                         <!-- Location Info -->
                        {#if event.location_name}
                            <p class="event-location">
                                <MapPin size={16} style="display: inline-block; vertical-align: text-bottom; margin-right: 4px;"/>
                                {#if event.place_id}
                                    <a href="/places/{event.place_id}" class="location-link">{event.location_name}</a>
                                {:else}
                                    {event.location_name}
                                {/if}
                            </p>
                        {/if}

                        <!-- Description -->
                        {#if event.description}
                            <p class="event-description">{event.description}</p>
                        {/if}

                        <!-- Ticket Link Button -->
                        {#if event.ticket_url}
                             <div class="event-actions">
                                <a href={event.ticket_url} target="_blank" rel="noopener noreferrer" class="btn btn-primary btn-sm ticket-link"> <!-- Use button class -->
                                    Tickets / Infos <ExternalLink size={16} style="display:inline-block; vertical-align: middle; margin-left: 4px;" />
                                </a>
                             </div>
                        {/if}

                    </div>
                </li>
            {/each}
        </ul>
    {:else}
        <p class="no-results">Aucun Ã©vÃ©nement Ã  venir trouvÃ© pour le moment. Revenez bientÃ´t !</p> <!-- Use no-results style -->
    {/if}
</div>

<style>
    /* Re-use list page container styles */
    .list-page-container {
        max-width: 950px; /* Slightly wider max-width for events */
        margin: 0 auto;
    }

    h1 {
        color: var(--ocean-blue-dark);
        text-align: center;
        margin-bottom: var(--space-lg);
    }

    p {
        text-align: center;
        color: var(--text-secondary);
        margin-bottom: var(--space-xl);
    }

    /* --- Event List & Card --- */
    .events-list {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        flex-direction: column;
        gap: var(--space-xl); /* Space between cards */
        transition: opacity 0.3s ease-in-out;
    }

    .event-card {
        display: flex;
        flex-direction: column; /* Mobile first: Image top, text bottom */
        background-color: var(--bg-secondary); /* Card background */
        border-radius: var(--radius-md);
        box-shadow: var(--shadow-md);
        overflow: hidden; /* Clip image corners */
        border: 1px solid var(--border-color);
        transition: transform var(--transition-normal), box-shadow var(--transition-normal);
    }
     .event-card:hover {
         transform: translateY(-3px);
         box-shadow: var(--shadow-lg);
     }


    /* --- Event Image --- */
    .event-image {
        width: 100%;
        height: 200px; /* Fixed height for consistency */
        object-fit: cover;
    }

    /* --- Event Details --- */
    .event-details {
        padding: var(--space-lg);
        display: flex;
        flex-direction: column;
        flex-grow: 1; /* Allow details to fill space */
    }

    .event-details h2 {
        margin-top: 0;
        margin-bottom: var(--space-sm);
        color: var(--ocean-blue-dark);
        font-size: 1.4rem; /* Slightly smaller than detail page H1 */
        line-height: 1.3;
    }

     /* --- Meta Info (Category, Date) --- */
     .event-meta {
        display: flex;
        flex-wrap: wrap; /* Allow wrapping */
        align-items: center;
        gap: var(--space-md);
        margin-bottom: var(--space-md);
        font-size: 0.9rem;
     }

     .category-badge {
        display: inline-block;
        background-color: var(--sandy-beige);
        color: var(--text-primary);
        padding: 0.3em 0.8em;
        border-radius: var(--radius-sm);
        font-weight: 500;
     }

     .event-date {
        color: var(--text-secondary);
        font-weight: 500;
        flex-shrink: 0; /* Prevent date shrinking too much */
     }


    /* --- Location --- */
    .event-location {
         color: var(--text-secondary);
         font-size: 0.95rem;
         margin-top: 0;
         margin-bottom: var(--space-md);
         display: flex; /* Align icon */
         align-items: center;
     }
     .location-link {
        color: var(--ocean-blue);
        font-weight: 500;
        text-decoration: none;
     }
     .location-link:hover {
        text-decoration: underline;
        color: var(--ocean-blue-dark);
     }

     /* --- Description --- */
    .event-description {
        color: var(--text-primary);
        line-height: 1.6;
        font-size: 0.95rem;
        margin-top: 0;
        margin-bottom: var(--space-lg); /* Space before actions */
        flex-grow: 1; /* Push actions to bottom if description is short */
    }

    /* --- Actions (Ticket Button) --- */
     .event-actions {
         margin-top: auto; /* Pushes to bottom */
         padding-top: var(--space-sm); /* Small space above button */
     }
     .ticket-link {
         /* Uses .btn .btn-primary .btn-sm styles from app.css */
          display: inline-flex; /* Align icon */
          align-items: center;
     }


    /* --- Responsive Layout (Larger Screens) --- */
    @media (min-width: 768px) {
        .event-card {
            flex-direction: row; /* Image left, text right */
            align-items: flex-start; /* Align items top */
        }
        .event-image {
            width: 250px; /* Fixed width for image */
            height: auto; /* Auto height based on width */
            min-height: 180px; /* Ensure a minimum height */
            flex-shrink: 0; /* Prevent image shrinking */
             border-radius: var(--radius-md) 0 0 var(--radius-md); /* Round left corners only */
        }
         .event-details {
             padding: var(--space-lg) var(--space-xl); /* More horizontal padding */
         }
    }

    /* --- No Results --- */
    .no-results {
        text-align: center;
        font-style: italic;
        color: var(--text-secondary);
        margin-top: var(--space-lg);
        padding: var(--space-xl);
        background-color: var(--sandy-beige-light);
        border-radius: var(--radius-md);
        transition: opacity 0.3s ease-in-out;
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\events\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\favorites\+page.svelte ==========

<script>
    import { onMount } from 'svelte';
    import { browser } from '$app/environment';
    import { favoritesStore } from '$lib/stores/favoritesStore';
    import { supabase } from '$lib/supabaseClient';
    import PlaceCard from '$lib/components/PlaceCard.svelte';
    import RestaurantCard from '$lib/components/RestaurantCard.svelte';
    import LoadingSpinner from '$lib/components/LoadingSpinner.svelte';
    import ErrorMessage from '$lib/components/ErrorMessage.svelte';
    import { fly } from 'svelte/transition';

    let favoriteDetails = [];
    let isLoading = true;
    let error = null;
    let currentFavorites = []; // To hold the list from the store

    // Subscribe to the store to get the list of favorite IDs/types
    favoritesStore.subscribe(value => {
        currentFavorites = value;
        // If in browser, trigger data fetching when favorites change
        // Debounce or check might be needed if updates are too frequent, but likely fine
        if (browser) {
            fetchFavoriteDetails();
        }
    });

    async function fetchFavoriteDetails() {
        if (!currentFavorites || currentFavorites.length === 0) {
            favoriteDetails = [];
            isLoading = false;
            error = null;
            return; // Nothing to fetch
        }

        isLoading = true;
        error = null;

        const placeIds = currentFavorites.filter(f => f.type === 'place').map(f => f.id);
        const restaurantIds = currentFavorites.filter(f => f.type === 'restaurant').map(f => f.id);

        try {
            let places = [];
            let restaurants = [];

            // Fetch places if there are any favorited place IDs
            if (placeIds.length > 0) {
                const { data: placeData, error: placeError } = await supabase
                    .from('places')
                    .select('id, name, description, category, image_url') // Select fields needed by PlaceCard
                    .in('id', placeIds);
                if (placeError) throw placeError;
                places = placeData.map(p => ({ ...p, type: 'place' })) || []; // Add type for sorting/rendering
            }

            // Fetch restaurants if there are any favorited restaurant IDs
            if (restaurantIds.length > 0) {
                 const { data: restaurantData, error: restaurantError } = await supabase
                    .from('restaurants')
                    .select('id, name, description, cuisine_type, price_range, image_url') // Select fields needed by RestaurantCard
                    .in('id', restaurantIds);
                if (restaurantError) throw restaurantError;
                restaurants = restaurantData.map(r => ({ ...r, type: 'restaurant' })) || []; // Add type
            }

            // Combine and potentially sort (e.g., by name or date added from localStorage)
            // For now, just combine
            favoriteDetails = [...places, ...restaurants];
             // Optional: Sort by name
             // favoriteDetails.sort((a, b) => a.name.localeCompare(b.name));

             // Optional: Sort by date added (descending - newest first)
             // Need to retrieve addedAt from currentFavorites
             favoriteDetails.sort((a, b) => {
                const favA = currentFavorites.find(f => f.id === a.id && f.type === a.type);
                const favB = currentFavorites.find(f => f.id === b.id && f.type === b.type);
                return (favB?.addedAt || 0) - (favA?.addedAt || 0);
             });


        } catch (err) {
            console.error("Error fetching favorite details:", err);
            error = `Impossible de charger les dÃ©tails des favoris: ${err.message}`;
            favoriteDetails = []; // Clear details on error
        } finally {
            isLoading = false;
        }
    }

    // Fetch data when the component mounts on the client
    onMount(() => {
        if (browser) {
             fetchFavoriteDetails();
        } else {
            // Cannot fetch on server as localStorage isn't available
            isLoading = false;
            // error = "Les favoris ne peuvent Ãªtre chargÃ©s que cÃ´tÃ© client.";
        }
    });

</script>

<svelte:head>
    <title>Mes Favoris - Visit Agadir</title>
    <meta name="description" content="Consultez vos lieux et restaurants prÃ©fÃ©rÃ©s Ã  Agadir." />
</svelte:head>

<div class="favorites-page">
    <h1>Mes Favoris</h1>

    {#if isLoading}
        <LoadingSpinner />
    {:else if error}
        <ErrorMessage message={error} />
    {:else if favoriteDetails.length > 0}
         <p>Retrouvez ici les lieux et restaurants que vous avez ajoutÃ©s Ã  vos favoris.</p>
        <div class="favorites-grid">
            {#each favoriteDetails as item, index (item.type + '-' + item.id)}
                {#if item.type === 'place'}
                    <div in:fly="{{ y: 20, duration: 300, delay: index * 50 }}">
                        <PlaceCard place={item} />
                    </div>
                {:else if item.type === 'restaurant'}
                    <div in:fly="{{ y: 20, duration: 300, delay: index * 50 }}">
                        <RestaurantCard restaurant={item} />
                    </div>
                {/if}
            {/each}
        </div>
    {:else if currentFavorites.length > 0 && favoriteDetails.length === 0 && !error}
         <!-- Case where favorites exist in localStorage but details haven't loaded yet or failed silently -->
          <LoadingSpinner />
          <p style="text-align: center; margin-top: 1rem;">Chargement des dÃ©tails...</p>
    {:else}
        <p class="no-favorites">Vous n'avez pas encore ajoutÃ© de favoris. Cliquez sur le cÅ“ur â¤ï¸ sur une carte de lieu ou de restaurant pour l'ajouter !</p>
    {/if}
</div>

<style>
    .favorites-page {
        max-width: 1200px; /* Match layout max-width */
        margin: 0 auto; /* Center */
    }

    h1 {
        color: var(--ocean-blue-dark);
        text-align: center;
        margin-bottom: var(--space-xl);
    }

    .favorites-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: var(--space-lg);
        margin-top: var(--space-xl);
        transition: opacity 0.3s ease-in-out;
    }

    .no-favorites {
        text-align: center;
        font-style: italic;
        color: var(--text-secondary);
        margin-top: var(--space-xxl);
        padding: var(--space-xl);
        background-color: var(--sandy-beige-light);
        border-radius: var(--radius-md);
        border: 1px dashed var(--sandy-beige-dark);
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
        transition: opacity 0.3s ease-in-out;
    }

     /* Ensure cards take full width within the grid cell */
    :global(.favorites-grid .card-link) {
         width: 100%;
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\favorites\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\map\+page.js ==========

import { supabase } from '$lib/supabaseClient';
import { error } from '@sveltejs/kit';

export async function load() {
    console.log("Chargement des donnÃ©es pour la page carte...");
    try {
        // Fetch TOUTES les places avec coordonnÃ©es valides
        const { data: places, error: placesError } = await supabase
            .from('places')
            .select('id, name, latitude, longitude, category') // Seulement les infos nÃ©cessaires pour les marqueurs
            .not('latitude', 'is', null) // Ne prend que ceux qui ont une latitude
            .not('longitude', 'is', null); // et une longitude

        if (placesError) throw placesError;

        // Fetch TOUS les restaurants avec coordonnÃ©es valides
        const { data: restaurants, error: restaurantsError } = await supabase
            .from('restaurants')
            .select('id, name, latitude, longitude, cuisine_type')
            .not('latitude', 'is', null)
            .not('longitude', 'is', null);

        if (restaurantsError) throw restaurantsError;

        console.log("DonnÃ©es carte chargÃ©es:", { places, restaurants });

        // Combine et formate les donnÃ©es pour les marqueurs de la carte
        const markersData = [
            ...(places || []).map(p => ({
                id: `place-${p.id}`,
                lat: p.latitude,
                lon: p.longitude,
                // Texte simple pour le popup, lien vers la page dÃ©tail
                popupText: `<b>${p.name}</b><br>${p.category || ''}<br><a href="/places/${p.id}">Voir dÃ©tails</a>`,
                type: 'place',
                category: p.category || null
            })),
            ...(restaurants || []).map(r => ({
                id: `resto-${r.id}`,
                lat: r.latitude,
                lon: r.longitude,
                popupText: `<b>${r.name}</b><br>${r.cuisine_type || ''}<br><a href="/restaurants/${r.id}">Voir dÃ©tails</a>`,
                type: 'restaurant',
                cuisine: r.cuisine_type || null
            }))
        ];

        return {
            markers: markersData
        };

    } catch (err) {
        console.error("Erreur lors du chargement des donnÃ©es carte:", err.message);
        throw error(500, `Impossible de charger les donnÃ©es pour la carte: ${err.message}`);
    }
}

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\map\+page.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\map\+page.svelte ==========

<script>
	import { browser } from '$app/environment';
	import { onMount } from 'svelte';
	import Map from '$lib/components/Map.svelte';
	import LoadingSpinner from '$lib/components/LoadingSpinner.svelte';

	export let data; // Receives data from +page.js

	// --- State Variables ---
	let allMarkers = []; // Holds the original full list of markers
	let filteredMarkers = []; // Holds the markers to be displayed on the map
	let uniquePlaceCategories = [];
	let uniqueRestaurantCuisines = [];
	let selectedPlaceCategories = []; // Bound to checkboxes
	let selectedRestaurantCuisines = []; // Bound to checkboxes
	let filtersOpen = false; // Filters start closed by default

	// Flags to control initial loading state for filters
	let categoriesDerived = false;
	let cuisinesDerived = false;

	// Map settings (as before)
	let mapCenter = [30.4202, -9.5982];
	let mapZoom = 13;

	// --- Derive Filters and Initialize ---
	// Use a reactive statement to process data once it's available
	$: if (data?.markers && data.markers.length > 0 && !categoriesDerived && !cuisinesDerived) {
		allMarkers = data.markers;

		// Extract unique place categories (handle null/undefined/empty strings)
		const placeCats = new Set(
			allMarkers
				.filter((m) => m.type === 'place' && m.category)
				.map((m) => m.category.trim())
				.filter(Boolean) // Remove empty strings after trimming
		);
		uniquePlaceCategories = [...placeCats].sort();
		selectedPlaceCategories = [...uniquePlaceCategories]; // Select all initially
		categoriesDerived = true; // Mark as derived

		// Extract unique restaurant cuisines (handle null/undefined/empty strings)
		const restaurantCuis = new Set(
			allMarkers
				.filter((m) => m.type === 'restaurant' && m.cuisine)
				.map((m) => m.cuisine.trim())
				.filter(Boolean) // Remove empty strings after trimming
		);
		uniqueRestaurantCuisines = [...restaurantCuis].sort();
		selectedRestaurantCuisines = [...uniqueRestaurantCuisines]; // Select all initially
		cuisinesDerived = true; // Mark as derived

		// Trigger initial filtering calculation
		filterMapMarkers();
		console.log('Filters derived:', { uniquePlaceCategories, uniqueRestaurantCuisines });
	}

	// --- Filtering Logic ---
	// Reactive statement recalculates filteredMarkers whenever selections change
	$: filterMapMarkers(selectedPlaceCategories, selectedRestaurantCuisines, allMarkers);

	function filterMapMarkers() {
		// Ensure allMarkers is populated before filtering
		if (!allMarkers || allMarkers.length === 0) {
			filteredMarkers = [];
			return;
		}

		filteredMarkers = allMarkers.filter((marker) => {
			if (marker.type === 'place') {
				// Include place if its category is selected OR if it has no category (treat uncategorized as always visible when any filter is on)
				return selectedPlaceCategories.includes(marker.category) || !marker.category;
			} else if (marker.type === 'restaurant') {
				// Include restaurant if its cuisine is selected OR if it has no cuisine
				return selectedRestaurantCuisines.includes(marker.cuisine) || !marker.cuisine;
			}
			return false; // Should not happen if type is always place/restaurant
		});
	}

	// Helper functions for Select All/None (Optional but useful)
	function selectAllCategories() {
		selectedPlaceCategories = [...uniquePlaceCategories];
	}
	function selectNoneCategories() {
		selectedPlaceCategories = [];
	}
	function selectAllCuisines() {
		selectedRestaurantCuisines = [...uniqueRestaurantCuisines];
	}
	function selectNoneCuisines() {
		selectedRestaurantCuisines = [];
	}
</script>

<svelte:head>
	<title>Carte Interactive d'Agadir - Visit Agadir</title>
	<meta
		name="description"
		content="Explorez les points d'intÃ©rÃªt et restaurants d'Agadir sur la carte interactive."
	/>
</svelte:head>

<section class="map-page-section">
	<h1>Carte Interactive d'Agadir</h1>
	<p class="intro-text">DÃ©couvrez les lieux et restaurants directement sur la carte.</p>

	<!-- Collapsible Filters Section -->
	{#if categoriesDerived || cuisinesDerived}
		<details class="filters-details" bind:open={filtersOpen}>
			<summary class="filters-summary">
				Afficher/Masquer les Filtres
				<span class="filters-toggle-icon">{#if filtersOpen}â–²{:else}â–¼{/if}</span>
			</summary>

			<div class="filters-container">
				<!-- Place Category Filters -->
				{#if uniquePlaceCategories.length > 0}
					<fieldset class="filter-group">
						<legend>Lieux par CatÃ©gorie</legend>
						<div class="filter-controls">
							<button on:click={selectAllCategories} class="btn btn-secondary btn-sm">Tout</button>
							<button on:click={selectNoneCategories} class="btn btn-secondary btn-sm">Aucun</button>
						</div>
						<div class="checkbox-list">
							{#each uniquePlaceCategories as category (category)}
								<label>
									<input type="checkbox" bind:group={selectedPlaceCategories} value={category} />
									{category}
								</label>
							{/each}
						</div>
					</fieldset>
				{/if}

				<!-- Restaurant Cuisine Filters -->
				{#if uniqueRestaurantCuisines.length > 0}
					<fieldset class="filter-group">
						<legend>Restaurants par Cuisine</legend>
						<div class="filter-controls">
							<button on:click={selectAllCuisines} class="btn btn-secondary btn-sm">Tout</button>
							<button on:click={selectNoneCuisines} class="btn btn-secondary btn-sm">Aucun</button>
						</div>
						<div class="checkbox-list">
							{#each uniqueRestaurantCuisines as cuisine (cuisine)}
								<label>
									<input type="checkbox" bind:group={selectedRestaurantCuisines} value={cuisine} />
									{cuisine}
								</label>
							{/each}
						</div>
					</fieldset>
				{/if}
			</div>
			<!-- END of filters-container div -->
		</details>
		<!-- End details -->
	{:else if data?.markers}
		<!-- Optional: Show a message if deriving filters hasn't completed but data is there -->
		<!-- <p>Chargement des filtres...</p> -->
	{/if}
	<!-- End Filters Section -->

	<!-- Map Rendering Section -->
	{#if browser}
		<!-- Render map using filteredMarkers -->
		<Map markers={filteredMarkers} center={mapCenter} zoom={mapZoom} mapId="main-map" />

		<!-- Message if filters result in no markers shown -->
		{#if (categoriesDerived || cuisinesDerived) && filteredMarkers.length === 0 && allMarkers.length > 0}
			<p class="no-results-message">
				Aucun marqueur ne correspond aux filtres sÃ©lectionnÃ©s. Essayez d'Ã©largir votre sÃ©lection.
			</p>
		{:else if !data?.markers || allMarkers.length === 0}
			<!-- Message if no markers loaded initially -->
			<p>Aucun point d'intÃ©rÃªt avec coordonnÃ©es trouvÃ© Ã  afficher sur la carte.</p>
		{/if}

		<!-- Loading Spinner (Handles initial data load before filters are derived) -->
		{#if !categoriesDerived && !cuisinesDerived && !data?.error}
			<LoadingSpinner />
		{/if}

	{:else}
		<!-- Placeholder during server-side rendering -->
		<div
			style="height: 500px; background: #eee; display: flex; align-items: center; justify-content: center; border-radius: 8px;"
		>
			Carte en cours de chargement...
		</div>
	{/if}
	<!-- End Map Rendering Section -->
</section>

<style>
    /* src/routes/map/+page.svelte styles */

    .map-page-section {
        max-width: 100%; /* Allow section to span width for better map display */
    }

    h1 {
        margin-top: 0;
        color: var(--ocean-blue-dark);
        text-align: center;
        margin-bottom: var(--space-sm);
    }
    p.intro-text { /* Added class for clarity */
        margin-bottom: var(--space-lg);
        color: var(--text-secondary);
        text-align: center;
    }

    /* --- Collapsible Filter Styles --- */
    .filters-details {
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        margin-bottom: var(--space-lg);
        background-color: var(--bg-secondary);
        overflow: hidden;
    }

    .filters-summary {
        padding: var(--space-sm) var(--space-md); /* Adjusted padding */
        cursor: pointer;
        font-weight: 600;
        color: var(--ocean-blue-dark);
        list-style: none;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: background-color var(--transition-fast);
        user-select: none;
    }
    .filters-summary:hover {
        background-color: var(--sandy-beige-light);
    }
    .filters-summary::-webkit-details-marker { display: none; }

    .filters-toggle-icon {
        font-size: 0.9em; /* Slightly larger icon */
        display: inline-block;
        margin-left: var(--space-sm);
        transition: transform var(--transition-fast);
        color: var(--text-secondary); /* Color for the icon */
    }
    .filters-details[open] .filters-summary {
         border-bottom: 1px solid var(--border-color); /* Add separator when open */
         background-color: var(--sandy-beige-light); /* Keep hover color when open */
    }
    /* Optional: Rotate icon when open */
    /* .filters-details[open] .filters-toggle-icon { transform: rotate(180deg); } */

    .filters-container {
        padding: var(--space-md) var(--space-lg); /* Use consistent padding */
        /* border-top removed, handled by summary border now */
    }

    .filter-group {
        border: none;
        padding: 0;
        margin: 0 0 var(--space-lg) 0; /* Consistent margin */
    }
    .filter-group:last-child { margin-bottom: 0; }

    .filter-group legend {
        font-size: 1.05rem; /* Slightly smaller legend */
        font-weight: 600;
        color: var(--ocean-blue-dark);
        padding-bottom: var(--space-xs);
        margin-bottom: var(--space-md); /* More space before checkboxes */
        border-bottom: 1px solid var(--sandy-beige-dark);
        width: 100%;
    }

    .filter-controls {
        margin-bottom: var(--space-md);
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-sm);
    }
    /* Ensure buttons use standard classes */
    .filter-controls .btn { /* Apply base button style if not already */
       /* Styles inherited via class names like btn-secondary btn-sm */
    }

    .checkbox-list {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); /* Adjust min width if needed */
        gap: var(--space-sm) var(--space-md);
        max-height: 200px;
        overflow-y: auto;
        padding: var(--space-xs) var(--space-sm) var(--space-xs) var(--space-xs); /* Padding for scrollbar + visual */
        border: 1px solid var(--sandy-beige-dark); /* Add subtle border to list */
        border-radius: var(--radius-sm);
        background-color: var(--bg-primary); /* Ensure background contrasts */
    }

    .checkbox-list label {
        display: flex;
        align-items: center;
        gap: var(--space-sm);
        color: var(--text-primary);
        cursor: pointer;
        font-size: 0.9rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        padding: var(--space-xs) 0; /* Add slight vertical padding */
        transition: color var(--transition-fast);
    }
    .checkbox-list label:hover {
        color: var(--ocean-blue);
    }

    .checkbox-list input[type='checkbox'] {
        margin: 0;
        width: 1em;
        height: 1em;
        cursor: pointer;
        accent-color: var(--ocean-blue); /* Theme color for check */
        flex-shrink: 0;
        vertical-align: middle; /* Align better with text */
    }
    /* --- End Filter Styles --- */


    /* --- Map Container Styling --- */
    :global(#main-map.map-container-style) {
        border-radius: var(--radius-md);
        border: 1px solid var(--border-color);
        box-shadow: var(--shadow-md); /* Slightly stronger shadow */
        margin-top: var(--space-lg);
        /* Height is controlled globally in Map.svelte or its specific global rule */
    }

    /* Message when filters hide all markers */
    .no-results-message {
        text-align: center;
        font-style: italic;
        color: var(--text-secondary);
        margin-top: var(--space-lg);
        padding: var(--space-lg);
        background-color: var(--sandy-beige-light);
        border-radius: var(--radius-md);
        border: 1px dashed var(--sandy-beige-dark); /* Dashed border */
    }

    /* Loading spinner alignment */
    :global(.spinner-container) {
        margin-top: var(--space-xl);
    }

</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\map\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\phrasebook\+page.svelte ==========

<script>
    // Keep your existing categories array
     const categories = [
        {
            name: "Salutations & Essentiels",
            phrases: [
                 { fr: "Bonjour", en: "Hello / Good morning", darija: "Salam / SbÃ¢h lkhir", amazigh: "Azul / Fulkin" },
                 { fr: "Bonsoir", en: "Good evening", darija: "Msa lkhir", amazigh: "Azul / TidggÊ·atin" },
                 { fr: "Au revoir", en: "Goodbye", darija: "Bslama", amazigh: "Ar timlilit" },
                 { fr: "Oui", en: "Yes", darija: "Wakha / Iyyeh", amazigh: "Wah / Yan" },
                 { fr: "Non", en: "No", darija: "La", amazigh: "Oho" },
                 { fr: "S'il vous plaÃ®t", en: "Please", darija: "Afak", amazigh: "Æafak / IÉ£ D ak iÉ›jb" },
                 { fr: "Merci (beaucoup)", en: "Thank you (very much)", darija: "Shukran (bzaf)", amazigh: "Shukran / Tanmirt (bahra)" },
                 { fr: "Excusez-moi / Pardon", en: "Excuse me / Sorry", darija: "Smah liya", amazigh: "Surf iyi" },
                 { fr: "Comment Ã§a va ?", en: "How are you?", darija: "Labas?", amazigh: "Manzaakin? / Mamec tkkit?" },
                 { fr: "Je ne comprends pas", en: "I don't understand", darija: "Ma fhemtch", amazigh: "Ur fhimeÉ£" },
                 { fr: "Parlez-vous anglais/franÃ§ais ?", en: "Do you speak English/French?", darija: "Wach kat hdar b lognlizia/franÒ«ia?", amazigh: "Is tsawalt s Tngliziyt/Tfransist?" },
            ]
        },
        {
            name: "Au Restaurant / CafÃ©",
            phrases: [
                 { fr: "Une table pour deux, svp", en: "A table for two, please", darija: "Wahd tabla dyal jouj, afak", amazigh: "Yan tabla n sin, É›afak" },
                 { fr: "Le menu, svp", en: "The menu, please", darija: "Lmenu, afak", amazigh: "Lmenu, É›afak" },
                 { fr: "L'addition, svp", en: "The bill, please", darija: "Lhssab, afak", amazigh: "Lá¸¥sab, É›afak" },
                 { fr: "De l'eau, svp", en: "Water, please", darija: "Lma, afak", amazigh: "Aman, É›afak" },
                 { fr: "ThÃ© Ã  la menthe", en: "Mint tea", darija: "Atay b neanaa", amazigh: "Atay s nnaÉ›naÉ›" },
                 { fr: "CafÃ©", en: "Coffee", darija: "Qahwa", amazigh: "Lqhwa" },
                 { fr: "C'Ã©tait dÃ©licieux !", en: "It was delicious!", darija: "Kan ldid / Kan zwin!", amazigh: "Ifulki / Yexla !" },
            ]
        },
         {
            name: "Directions",
            phrases: [
                 { fr: "OÃ¹ est... ?", en: "Where is...?", darija: "Fin kayna... ?", amazigh: "Mani illa...?" },
                 { fr: "Ã€ gauche", en: "Left", darija: "Ala lissr", amazigh: "áº’er uzelmaá¸" },
                 { fr: "Ã€ droite", en: "Right", darija: "Ala limn", amazigh: "áº’er ufusi" },
                 { fr: "Tout droit", en: "Straight ahead", darija: "Nishan", amazigh: "Garas garas / Nishan" },
                 { fr: "La plage", en: "The beach", darija: "Lbhar / La plage", amazigh: "La plage / Ifri" },
                 { fr: "Le souk", en: "The souk/market", darija: "Souk", amazigh: "Souk" },
            ]
        },
    ];
</script>

<svelte:head>
    <title>Guide de Conversation - Visit Agadir</title>
    <meta name="description" content="Phrases utiles en franÃ§ais, anglais, arabe marocain (darija) et amazigh pour votre sÃ©jour Ã  Agadir." />
</svelte:head>

<div class="static-page-container phrasebook-page"> <!-- Add common container class -->
    <h1>Guide de Conversation</h1>
    <p class="intro-paragraph">Quelques phrases pour vous aider Ã  communiquer lors de votre visite.</p>

    {#each categories as category (category.name)}
        <section class="category-section">
            <h2>{category.name}</h2>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>FranÃ§ais / English</th>
                            <th>Darija (Arabe Marocain)</th>
                            <th>Amazigh</th>
                        </tr>
                    </thead>
                    <tbody>
                        {#each category.phrases as phrase}
                            <tr>
                                <td>{phrase.fr}<br><small>{phrase.en}</small></td>
                                <td>{phrase.darija}</td>
                                <td>{phrase.amazigh || 'N/A'}</td>
                            </tr>
                        {/each}
                    </tbody>
                </table>
            </div>
        </section>
    {/each}

    <p class="important-note">
        <strong>Note :</strong> La prononciation peut varier. Ã‰couter les locaux est la meilleure faÃ§on d'apprendre ! Les transcriptions en Darija et Amazigh sont simplifiÃ©es et donnÃ©es Ã  titre indicatif.
    </p>
</div>

<style>
    /* Common static page styles */
    .static-page-container {
        max-width: 900px;
        margin: 0 auto;
        padding: var(--space-md) 0 var(--space-xxl);
    }
     h1 {
        color: var(--ocean-blue-dark);
        text-align: center;
        margin-bottom: var(--space-lg);
    }
     .intro-paragraph {
        text-align: center;
        color: var(--text-secondary);
        margin-bottom: var(--space-xl);
    }

    /* Section styling */
    .category-section {
        margin-bottom: var(--space-xl);
    }
    h2 {
        color: var(--ocean-blue);
        margin-bottom: var(--space-md);
        font-size: 1.5rem;
        padding-bottom: var(--space-sm);
        border-bottom: 1px solid var(--sandy-beige-dark);
    }

    /* Table styling */
    .table-container {
        width: 100%;
        overflow-x: auto; /* Keep horizontal scroll */
        -webkit-overflow-scrolling: touch;
        border: 1px solid var(--border-color); /* Add border around container */
        border-radius: var(--radius-md); /* Round corners of container */
         background-color: var(--bg-primary); /* Ensure background */
    }

    table {
        width: 100%;
        min-width: 550px; /* Ensure minimum width for scroll */
        border-collapse: collapse;
        font-size: 0.95rem;
        color: var(--text-primary);
    }

    th, td {
        border: 1px solid var(--sandy-beige-dark); /* Use theme border color */
        padding: var(--space-sm) var(--space-md); /* Use theme spacing */
        text-align: left;
        vertical-align: top;
        white-space: nowrap;
    }

    th {
        background-color: var(--sandy-beige-light); /* Use theme color */
        font-weight: 600; /* Slightly bolder */
        white-space: normal;
         color: var(--ocean-blue-dark); /* Header text color */
         position: sticky; /* Make header sticky within scroll container if desired */
         top: 0;
         z-index: 1;
    }

    /* Allow first column content to wrap */
    td:first-child { white-space: normal; }

    tr:nth-child(even) td { /* Use td selector for specificity */
        background-color: var(--bg-secondary); /* Stripe color */
    }
    tr:hover td { /* Hover effect */
         background-color: var(--sandy-beige-light);
    }

    td small { /* English text */
        display: block;
        color: var(--text-secondary);
        font-size: 0.9em;
        margin-top: var(--space-xs);
    }

     td:nth-child(2), td:nth-child(3) { /* Darija & Amazigh */
        font-style: italic;
     }

    /* Note styling */
    .important-note {
        margin-top: var(--space-xl);
        font-size: 0.9em;
        color: var(--text-secondary);
        background-color: var(--sandy-beige-light);
        border-left: 4px solid var(--ocean-blue);
        padding: var(--space-md);
        border-radius: var(--radius-sm);
    }
    /* Remove potential conflicts */
    .phrasebook-page { }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\phrasebook\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\places\[id]\+page.js ==========


========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\places\[id]\+page.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\places\[id]\+page.svelte ==========


========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\places\[id]\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\places\+page.js ==========

// src/routes/places/+page.js
import { supabase } from '$lib/supabaseClient';
import { error } from '@sveltejs/kit';

export async function load() {
    console.log("Chargement de la liste des lieux...");
    try {
        const { data: places, error: placesError } = await supabase
            .from('places')
            .select('id, name, description, category, image_url') // Select fields needed by PlaceCard
            .order('name', { ascending: true }); // Order alphabetically by name

        if (placesError) {
            throw placesError;
        }

        console.log("Lieux chargÃ©s:", places?.length);
        return {
            places: places || []
        };

    } catch (err) {
        console.error("Erreur lors du chargement des lieux:", err.message);
         throw error(500, `Impossible de charger la liste des lieux: ${err.message}`);
    }
}

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\places\+page.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\places\+page.svelte ==========

<script>
    import PlaceCard from '$lib/components/PlaceCard.svelte';
    import LoadingSpinner from '$lib/components/LoadingSpinner.svelte';
    import { navigating } from '$app/stores'; // Import navigating store
    import { fade, fly } from 'svelte/transition';

    export let data; // Receives data from +page.js
    $: places = data?.places || [];

</script>

<svelte:head>
    <title>Lieux Ã  Visiter - Agadir</title>
    <meta name="description" content="DÃ©couvrez les sites touristiques, plages, monuments et autres points d'intÃ©rÃªt Ã  Agadir." />
</svelte:head>

<div class="list-page-container">
    <h1>Lieux Ã  Visiter</h1>

    {#if places.length > 0}
        <p>Explorez les diffÃ©rents points d'intÃ©rÃªt d'Agadir et ses environs.</p>
        <div class="cards-grid">
            {#each places as place, index (place.id)}
                <div in:fade="{{ duration: 500, delay: index * 100 }}">
                    <PlaceCard {place} />
                </div>
            {/each}
        </div>
    {:else if !data || ($navigating && $navigating.to?.route.id === '/places')}
         <!-- Show loading spinner initially or during navigation to this specific page -->
         <!-- Check $navigating.to existence before accessing properties -->
         <LoadingSpinner />
    {:else}
         <!-- Handle case where data is loaded but places array is empty -->
         <p class="no-results">Aucun lieu trouvÃ© pour le moment.</p>
     {/if}

</div>

<style>
    .list-page-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    h1 {
        color: var(--ocean-blue-dark);
        text-align: center;
        margin-bottom: var(--space-lg);
    }

    p {
        text-align: center;
        color: var(--text-secondary);
        margin-bottom: var(--space-xl);
    }

    .cards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); /* Responsive grid */
        gap: var(--space-lg);
    }

    .no-results {
        text-align: center;
        font-style: italic;
        color: var(--text-secondary);
        margin-top: var(--space-xl);
        padding: var(--space-xl);
        background-color: var(--sandy-beige-light);
        border-radius: var(--radius-md);
    }

    /* Ensure cards take full width within the grid cell */
    :global(.cards-grid .card-link) {
         width: 100%;
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\places\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\restaurants\[id]\+page.js ==========


========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\restaurants\[id]\+page.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\restaurants\[id]\+page.svelte ==========


========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\restaurants\[id]\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\restaurants\+page.js ==========

// src/routes/restaurants/+page.js
import { supabase } from '$lib/supabaseClient';
import { error } from '@sveltejs/kit';

export async function load() {
    console.log("Chargement de la liste des restaurants...");
    try {
        const { data: restaurants, error: restaurantsError } = await supabase
            .from('restaurants')
            .select('id, name, description, cuisine_type, price_range, image_url') // Select fields needed by RestaurantCard
            .order('name', { ascending: true }); // Order alphabetically by name

        if (restaurantsError) {
            throw restaurantsError;
        }

        console.log("Restaurants chargÃ©s:", restaurants?.length);
        return {
            restaurants: restaurants || []
        };

    } catch (err) {
        console.error("Erreur lors du chargement des restaurants:", err.message);
         throw error(500, `Impossible de charger la liste des restaurants: ${err.message}`);
    }
}

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\restaurants\+page.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\restaurants\+page.svelte ==========

<script>
    import RestaurantCard from '$lib/components/RestaurantCard.svelte';
    import LoadingSpinner from '$lib/components/LoadingSpinner.svelte';
    import { navigating } from '$app/stores'; // Import navigating store
    import { fade, fly } from 'svelte/transition';

    export let data; // Receives data from +page.js
    $: restaurants = data?.restaurants || [];

</script>

<svelte:head>
    <title>OÃ¹ Manger - Restaurants Ã  Agadir</title>
    <meta name="description" content="Trouvez les meilleurs restaurants, cafÃ©s et snacks Ã  Agadir, pour tous les goÃ»ts et budgets." />
</svelte:head>

<div class="list-page-container">
    <h1>OÃ¹ Manger Ã  Agadir</h1>

    {#if restaurants.length > 0}
        <p>DÃ©couvrez une sÃ©lection de restaurants pour savourer la cuisine locale et internationale.</p>
        <div class="cards-grid">
            {#each restaurants as restaurant, index (restaurant.id)}
                <div in:fade="{{ duration: 500, delay: index * 100 }}">
                    <RestaurantCard {restaurant} />
                </div>
            {/each}
        </div>
    {:else if !data || ($navigating && $navigating.to?.route.id === '/restaurants')}
        <!-- Show loading spinner initially or during navigation to this specific page -->
        <!-- Check $navigating.to existence before accessing properties -->
        <LoadingSpinner />
    {:else}
        <p class="no-results">Aucun restaurant trouvÃ© pour le moment.</p>
    {/if}

</div>

<style>
    .list-page-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    h1 {
        color: var(--ocean-blue-dark);
        text-align: center;
        margin-bottom: var(--space-lg);
    }

    p {
        text-align: center;
        color: var(--text-secondary);
        margin-bottom: var(--space-xl);
    }

    .cards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: var(--space-lg);
        margin-top: var(--space-lg);
    }

    .no-results {
        text-align: center;
        font-style: italic;
        color: var(--text-secondary);
        margin-top: var(--space-lg);
        padding: var(--space-xl);
        background-color: var(--sandy-beige-light);
        border-radius: var(--radius-md);
    }

    /* Ensure cards take full width within the grid cell */
    :global(.cards-grid .card-link) {
        width: 100%;
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\restaurants\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\search\+page.js ==========

// src/routes/search/+page.js
import { supabase } from '$lib/supabaseClient';
import { error } from '@sveltejs/kit';

export async function load({ url }) {
    const query = url.searchParams.get('q')?.trim(); // Get the 'q' parameter from the URL

    if (!query) {
        // If no query, return empty results immediately or redirect, or show message
        return {
            query: '',
            results: [],
            message: "Veuillez entrer un terme de recherche."
        };
    }

    console.log(`Recherche pour: "${query}"`);

    try {
        // --- Search Places ---
        // Using 'or' to search in name or description.
        // 'ilike' is case-insensitive LIKE. '%' is wildcard.
        const { data: places, error: placesError } = await supabase
            .from('places')
            .select('id, name, description, category, image_url') // Fields for PlaceCard
            .or(`name.ilike.%${query}%,description.ilike.%${query}%`)
            .limit(20); // Limit results per type

        if (placesError) throw placesError;

        // --- Search Restaurants ---
        const { data: restaurants, error: restaurantsError } = await supabase
            .from('restaurants')
            .select('id, name, description, cuisine_type, price_range, image_url') // Fields for RestaurantCard
            .or(`name.ilike.%${query}%,description.ilike.%${query}%`)
            // Optional: search cuisine_type too
            // .or(`name.ilike.%${query}%,description.ilike.%${query}%,cuisine_type.ilike.%${query}%`)
            .limit(20);

        if (restaurantsError) throw restaurantsError;

        // Combine results, adding a 'type' property
        const combinedResults = [
            ...(places || []).map(p => ({ ...p, type: 'place' })),
            ...(restaurants || []).map(r => ({ ...r, type: 'restaurant' }))
        ];

         // Optional: Sort combined results by name
         combinedResults.sort((a, b) => a.name.localeCompare(b.name));

        console.log(`RÃ©sultats trouvÃ©s: ${combinedResults.length}`);

        return {
            query,
            results: combinedResults
        };

    } catch (err) {
        console.error(`Erreur lors de la recherche pour "${query}":`, err.message);
        throw error(500, `Erreur lors de la recherche: ${err.message}`);
        // Or return error state:
        // return { query, results: [], error: `Erreur lors de la recherche: ${err.message}` };
    }
}

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\search\+page.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\search\+page.svelte ==========

<script>
    import PlaceCard from '$lib/components/PlaceCard.svelte';
    import RestaurantCard from '$lib/components/RestaurantCard.svelte';
    import LoadingSpinner from '$lib/components/LoadingSpinner.svelte';
    import ErrorMessage from '$lib/components/ErrorMessage.svelte';
    import { navigating } from '$app/stores';
    import { fly } from 'svelte/transition';

    export let data; // From +page.js

    $: query = data?.query;
    $: results = data?.results;
    $: message = data?.message; // Message if query was empty
    $: pageError = data?.error; // If +page.js returns an error instead of throwing

    $: isLoading = $navigating && $navigating.to?.route.id === '/search';

</script>

<svelte:head>
    <title>RÃ©sultats de recherche pour "{query || 'Recherche'}" - Visit Agadir</title>
    <meta name="description" content="Recherchez des lieux et restaurants Ã  Agadir." />
</svelte:head>

<div class="search-page-container">

    {#if query}
        <h1>RÃ©sultats pour "{query}"</h1>
    {:else}
         <h1>Recherche</h1>
    {/if}

    <!-- Re-add search bar here? Optional, could refine header interaction later -->
    <!-- <div class="search-bar-again"> ... </div> -->

    {#if isLoading}
        <LoadingSpinner />
    {:else if message}
         <p class="search-message">{message}</p>
    {:else if pageError}
         <ErrorMessage message={pageError} />
    {:else if results && results.length > 0}
        <p>{results.length} rÃ©sultat(s) trouvÃ©(s).</p>
        <div class="results-grid">
            {#each results as item, index (item.type + '-' + item.id)}
                {#if item.type === 'place'}
                    <div in:fly="{{ y: 20, duration: 300, delay: index * 50 }}">
                        <PlaceCard place={item} />
                    </div>
                {:else if item.type === 'restaurant'}
                    <div in:fly="{{ y: 20, duration: 300, delay: index * 50 }}">
                        <RestaurantCard restaurant={item} />
                    </div>
                {/if}
            {/each}
        </div>
    {:else if query}
         <p class="no-results">Aucun rÃ©sultat trouvÃ© pour "{query}". Essayez un autre terme.</p>
    {:else}
         <!-- Should ideally not happen if message is handled -->
          <p class="search-message">Effectuez une recherche via l'icÃ´ne dans l'en-tÃªte.</p>
    {/if}

</div>

<style>
    /* src/routes/search/+page.svelte styles */

    .search-page-container {
        max-width: 1200px; /* Consistent max-width */
        margin: 0 auto;
        padding-bottom: var(--space-xxl); /* Ensure space at bottom */
    }

    h1 {
        color: var(--ocean-blue-dark);
        text-align: center;
        margin-bottom: var(--space-lg);
        margin-top: 0;
    }

    /* General message styling */
    p {
        text-align: center;
        color: var(--text-secondary);
        margin-bottom: var(--space-xl);
    }
    .search-message { /* For 'Please enter search term' */
        font-style: italic;
         margin-top: var(--space-xl);
         padding: var(--space-xl);
         background-color: var(--sandy-beige-light);
         border-radius: var(--radius-md);
         max-width: 600px; /* Limit width */
         margin-left: auto;
         margin-right: auto;
    }

    .results-grid {
        display: grid;
        /* Match grid from places/restaurants pages */
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: var(--space-lg);
        margin-top: var(--space-lg);
    }

    .no-results { /* Style for 'No results found for "query"' */
        text-align: center;
        font-style: italic;
        color: var(--text-secondary);
        margin-top: var(--space-xl);
        padding: var(--space-xl);
        background-color: var(--sandy-beige-light);
        border-radius: var(--radius-md);
        border: 1px dashed var(--sandy-beige-dark); /* Dashed border */
        max-width: 600px; /* Limit width */
        margin-left: auto;
        margin-right: auto;
    }

    /* Ensure cards take full width */
    :global(.results-grid .card-link) {
        width: 100%;
    }

    /* Loading spinner alignment */
    :global(.spinner-container) {
        margin-top: var(--space-xl);
    }

    /* Error message alignment/styling */
    :global(.error-message) {
        margin-top: var(--space-xl);
        max-width: 600px; /* Limit width */
        margin-left: auto;
        margin-right: auto;
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\search\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\transport\+page.svelte ==========

<script>
  // No script needed
</script>

<svelte:head>
  <title>Transport Ã  Agadir - Visit Agadir</title>
  <meta name="description" content="Informations pratiques sur les bus, taxis, location de voiture et navette aÃ©roport Ã  Agadir." />
</svelte:head>

<div class="static-page-container transport-page"> <!-- Add common container class -->
  <h1>Se DÃ©placer Ã  Agadir</h1>
  <p class="intro-paragraph">Options et conseils pour vos dÃ©placements dans et autour de la ville.</p>

  <section>
    <h2>Bus Locaux</h2>
    <p>GÃ©rÃ©s par des compagnies privÃ©es (comme Alsa), les bus urbains sont une option Ã©conomique. Les tarifs varient gÃ©nÃ©ralement selon la distance (Ã  partir de ~3-5 MAD).</p>
    <p>Les lignes couvrent la plupart des quartiers, avec des horaires allant approximativement de 6h Ã  21h. Consultez le site de la compagnie principale pour les lignes et horaires prÃ©cis.</p>
    <!-- Maybe add link to Alsa Agadir if available -->
  </section>

  <section>
    <h2>Taxis</h2>
    <p>Deux types principaux :</p>
    <ul>
      <li><strong>Petits Taxis (Rouges) :</strong> Pour les trajets <strong>intra-urbains</strong>. Ils utilisent obligatoirement un compteur (<span style="font-style: italic;">demandez son activation</span>). Prise en charge jour/nuit diffÃ©renciÃ©e (~2-3 MAD), avec tarif minimum par course.</li>
      <li><strong>Grands Taxis (Blancs ou autre couleur selon destination) :</strong> Pour les trajets <strong>pÃ©ri-urbains et inter-urbains</strong> (ex: aÃ©roport, Taghazout, Inezgane). Fonctionnent souvent en mode "collectif" sur des lignes fixes ou peuvent Ãªtre privatisÃ©s. Le prix est Ã  <strong>nÃ©gocier Ã  l'avance</strong> si privatisÃ©, ou fixe par place si collectif.</li>
    </ul>
    <p><strong>Conseils Taxis :</strong> Ayez de la monnaie. Pour les petits taxis, assurez-vous que le compteur est lancÃ©. Pour les grands taxis, mettez-vous d'accord sur le prix *avant* de monter si vous le privatisez.</p>
  </section>

  <section>
    <h2>Location de Voitures</h2>
    <p>De nombreuses agences internationales (Hertz, Avis, Sixt...) et locales sont prÃ©sentes Ã  l'aÃ©roport et en ville.</p>
    <p><strong>Tarifs :</strong> Variables selon saison et catÃ©gorie (Ã  partir de ~200-300 MAD/jour hors extras). Comparez les offres.</p>
    <p><strong>Conditions :</strong> Permis de conduire valide (international souvent recommandÃ© mais pas toujours obligatoire pour certains permis), Ã¢ge minimum (souvent 21-25 ans), carte de crÃ©dit pour la caution.</p>
    <p><strong>Conduite :</strong> Ã€ droite. Ceinture obligatoire. Prudence accrue recommandÃ©e, surtout en ville. Attention aux deux-roues et piÃ©tons.</p>
  </section>

  <section>
    <h2>Navette AÃ©roport Al Massira (AGA)</h2>
    <p>Plusieurs options pour rejoindre/quitter l'aÃ©roport (~25 km du centre) :</p>
    <ul>
      <li><strong>Grands Taxis :</strong> Disponibles Ã  la sortie. Tarif rÃ©glementÃ© et affichÃ© vers Agadir (~200-250 MAD, sujet Ã  changement). Confirmez avant dÃ©part.</li>
      <li><strong>Bus L-AE (Airport Express) :</strong> Option la plus Ã©conomique (~50 MAD). GÃ©rÃ©e par Alsa, relie l'aÃ©roport au centre via Inezgane. FrÃ©quence limitÃ©e, vÃ©rifiez les horaires sur le site d'Alsa.</li>
       <li><strong>Navettes privÃ©es / HÃ´tels :</strong> Transferts rÃ©servables en ligne ou via certains hÃ´tels (souvent payants).</li>
    </ul>
  </section>

   <section>
    <h2>Autres Informations</h2>
    <ul>
      <li><strong>Stationnement :</strong> Souvent payant en centre-ville (horodateurs ou gardiens non officiels). PrÃ©voir ~2-5 MAD/heure.</li>
      <li><strong>PiÃ©tons :</strong> Traversez avec prudence, mÃªme sur les passages piÃ©tons.</li>
       <li><strong>Applications VTC :</strong> Des applications comme Careem ou InDriver peuvent Ãªtre disponibles, mais leur fonctionnement/rÃ©glementation peut varier. Les taxis restent l'option la plus courante.</li>
    </ul>
  </section>

</div>

<style>
   /* Common static page styles */
  .static-page-container {
      max-width: 850px;
      margin: 0 auto;
      padding: var(--space-md) 0 var(--space-xxl);
       line-height: 1.7;
  }
   h1 {
      color: var(--ocean-blue-dark);
      text-align: center;
      margin-bottom: var(--space-lg);
  }
   .intro-paragraph {
      text-align: center;
      color: var(--text-secondary);
      margin-bottom: var(--space-xl);
      font-size: 1.1rem;
  }

  section {
      margin-bottom: var(--space-xl);
       /* Removed background/padding from conseil page style */
  }

  h2 {
      color: var(--ocean-blue);
      margin-top: 0; /* Reset margin top if inside section */
      margin-bottom: var(--space-md);
      font-size: 1.5rem;
      padding-bottom: var(--space-sm);
      border-bottom: 1px solid var(--sandy-beige-dark);
  }

  p {
      margin-bottom: var(--space-md);
      color: var(--text-primary);
  }

   ul {
       margin-left: 0;
       padding-left: var(--space-lg);
       list-style: disc; /* Default list style */
       margin-bottom: var(--space-md);
   }
   li { margin-bottom: var(--space-md); }
   li strong { font-weight: 600; color: var(--text-primary); } /* Bolder list item titles */

   /* Remove potential conflicts */
   .transport-page {}
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\transport\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\+layout.svelte ==========

<script>
	import Header from '$lib/components/Header.svelte';
	import Footer from '$lib/components/Footer.svelte';
	import SideNav from '$lib/components/SideNav.svelte';
	import ErrorMessage from '$lib/components/ErrorMessage.svelte';
	import BottomNav from '$lib/components/BottomNav.svelte';
	import { isSideNavOpen } from '$lib/stores/navStore';
    // --- Theme Imports ---
	import { themeStore, applyTheme } from '$lib/stores/themeStore.js'; // Import store and helper
    // --- End Theme Imports ---
	import '../app.css';

	import { page } from '$app/stores';
	import { onMount } from 'svelte';
	import { browser } from '$app/environment';

	let installPromptEvent = null;
	let showInstallButton = false;

	$: error = $page.error;

    // --- Theme Subscription ---
    // Use $: to reactively call applyTheme whenever the store value changes
    $: if ($themeStore) { // Ensure $themeStore is accessed to trigger reactivity
        applyTheme($themeStore);
    }
    // --- End Theme Subscription ---

	onMount(() => {
		if (browser) {
			window.addEventListener('beforeinstallprompt', (event) => {
				event.preventDefault();
				installPromptEvent = event;
				showInstallButton = true;
				console.log('\'beforeinstallprompt\' event captured.');
			});

			window.addEventListener('appinstalled', () => {
				showInstallButton = false;
				installPromptEvent = null;
				console.log('PWA was installed');
			});
		}
	});

	async function handleInstallClick() {
		if (!installPromptEvent) {
			console.log('Install prompt event not available.');
			return;
		}
		try {
			installPromptEvent.prompt();
			const { outcome } = await installPromptEvent.userChoice;
			console.log(`User response to the install prompt: ${outcome}`);
			installPromptEvent = null;
			showInstallButton = false;
		} catch (error) {
			console.error('Error showing install prompt:', error);
			installPromptEvent = null;
			showInstallButton = false;
		}
	}
</script>

<!-- RÃ‰-AJOUTÃ‰ : Affiche SideNav si le store est true -->
{#if $isSideNavOpen}
	<SideNav />
{/if}

<div class="app-container">
	<Header />

	<main>
		{#if error}
			<ErrorMessage message={error.message || 'Une erreur est survenue.'} />
		{:else}
			<slot />
		{/if}
	</main>

	<BottomNav />
	<Footer showInstallButton={showInstallButton} handleInstallClick={handleInstallClick} />
</div>

<style>
	/* Styles existants */
	.app-container {
		display: flex;
		flex-direction: column;
		min-height: 100vh;
		position: relative;
	}

	main {
		flex: 1;
		padding-top: var(--space-lg);
		padding-bottom: var(--space-xl);
		max-width: 1200px;
		margin-left: auto; /* Center content */
        margin-right: auto;
        width: 100%; /* Ensure it takes width for centering */
		box-sizing: border-box;
        padding-left: var(--space-md); /* Add horizontal padding here */
        padding-right: var(--space-md);
	}

	/* Ajuster le padding du footer pour Ã©viter le chevauchement avec le BottomNav */
	footer {
		padding-top: 60px; /* Hauteur approximative du BottomNav */
	}

    /* Ajuster le padding du main sur mobile pour le BottomNav */
    @media (max-width: 767px) {
        main {
            padding-bottom: calc(60px + var(--space-lg) + env(safe-area-inset-bottom));
        }
    }
</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\+layout.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\+page.js ==========

import { supabase } from '$lib/supabaseClient';
import { error } from '@sveltejs/kit'; // Pour gÃ©rer les erreurs de chargement

// Nombre d'Ã©lÃ©ments Ã  afficher par catÃ©gorie sur l'accueil (pour ne pas tout charger)
const HOME_PAGE_LIMIT = 6;

export async function load() {
    console.log("Chargement des donnÃ©es pour la page d'accueil...");
    try {
        // Fetch les N premiÃ¨res places (triÃ©es par nom, par exemple)
        const { data: places, error: placesError } = await supabase
            .from('places')
            .select('id, name, description, category, image_url') // SÃ©lectionne les champs nÃ©cessaires pour la carte
            .order('name', { ascending: true })
            .limit(HOME_PAGE_LIMIT);

        if (placesError) throw placesError; // Lance l'erreur si Supabase Ã©choue

        // Fetch les N premiers restaurants
        const { data: restaurants, error: restaurantsError } = await supabase
            .from('restaurants')
            .select('id, name, description, cuisine_type, price_range, image_url')
            .order('name', { ascending: true })
            .limit(HOME_PAGE_LIMIT);

        if (restaurantsError) throw restaurantsError;

        console.log("DonnÃ©es chargÃ©es :", { places, restaurants });

        // Retourne les donnÃ©es qui seront disponibles dans +page.svelte via la prop 'data'
        return {
            places: places || [],
            restaurants: restaurants || []
        };

    } catch (err) {
        console.error("Erreur lors du chargement des donnÃ©es d'accueil:", err.message);
        // Retourne une erreur que le layout peut attraper et afficher
        throw error(500, `Impossible de charger les donnÃ©es depuis Supabase: ${err.message}`);
    }
}

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\+page.js ==========


========== FICHIER: H:\my apps\agadir tourism\src\routes\+page.svelte ==========

<script>
  import WeatherWidget from '$lib/components/WeatherWidget.svelte';
  // Import the chosen Lucide icons
  import { Map, Landmark, UtensilsCrossed, CalendarDays, Bus, Info } from 'lucide-svelte';

  // We still have access to 'data' from +page.js if we want to use places/restaurants later
  export let data;

  // Update shortcuts array to use the imported icon components
  const shortcuts = [
    { href: '/map', label: 'Carte Interactive', icon: Map }, // Use component
    { href: '/places', label: 'Sites Ã  Visiter', icon: Landmark }, // Use component
    { href: '/restaurants', label: 'OÃ¹ Manger', icon: UtensilsCrossed }, // Use component
    { href: '/events', label: 'Ã‰vÃ©nements', icon: CalendarDays }, // Use component
    { href: '/transport', label: 'Transport', icon: Bus }, // Use component
    { href: '/contacts', label: 'Infos Utiles', icon: Info } // Use component
  ];

  // Placeholder for hero image - replace with a real image path later
  const heroImageUrl = '/assets/images/default-placeholder.jpg'; // <- CHANGE THIS PATH

</script>

<svelte:head>
  <title>Accueil - Visit Agadir PWA</title> <!-- Updated Title slightly -->
  <meta name="description" content="Votre guide pour dÃ©couvrir Agadir. Carte, lieux, restaurants, Ã©vÃ©nements, transport et infos utiles." />
</svelte:head>

<div class="home-container">

  <!-- Section Hero -->
  <section class="hero-section">
      <img src={heroImageUrl} alt="Paysage d'Agadir" class="hero-image" />
      <div class="hero-text">
          <h1>Bienvenue Ã  Agadir !</h1>
          <p>Votre application pour explorer la perle du Souss.</p>
          <a href="/map" class="btn btn-accent btn-lg" style="margin-top: var(--space-md);">Explorer la Carte</a>
      </div>
  </section>

  <!-- Section Raccourcis (Improved Styling) -->
  <section class="shortcuts-section">
    <h2>AccÃ¨s Rapides</h2>
    <div class="shortcuts-grid">
      {#each shortcuts as shortcut (shortcut.href)}
        <a href={shortcut.href} class="shortcut-card">
          <div class="shortcut-icon">
            <svelte:component this={shortcut.icon} size={40} strokeWidth={1.5} />
          </div>
          <!-- If using Lucide: <svelte:component this={shortcut.icon} size={40} stroke-width={1.5} /> -->
          <span class="shortcut-label">{shortcut.label}</span>
        </a>
      {/each}
    </div>
  </section>

  <!-- Section MÃ©tÃ©o -->
  <section class="weather-section">
     <!-- Title is inside the widget -->
    <WeatherWidget />
  </section>

  <!-- Potential Future Section: Featured Places/Restaurants -->
  <!-- {#if data?.places && data.places.length > 0}
      <section class="featured-section">
          <h2>Quelques Suggestions</h2>
          <div class="featured-grid">
              {#each data.places.slice(0, 3) as place} <!- Show first 3 ->
                  <PlaceCard {place} />
              {/each}
          </div>
      </section>
  {/if} -->

</div>

<style>
  .home-container {
    /* padding-top removed, handled by hero margin/padding */
    padding-bottom: var(--space-xxl); /* More space at the bottom */
  }

  /* --- Hero Section --- */
  .hero-section {
      position: relative; /* For text overlay */
      margin-bottom: var(--space-xxl); /* Space below hero */
      border-radius: var(--radius-lg); /* Rounded corners */
      overflow: hidden; /* Keep image inside rounded corners */
      box-shadow: var(--shadow-md);
      min-height: 250px; /* Minimum height */
      display: flex; /* Use flex for text alignment */
      align-items: center; /* Center text vertically */
      justify-content: center; /* Center text horizontally */
  }

  .hero-image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      z-index: 1;
      filter: brightness(0.6) contrast(1) saturate(1.1);
  }

  .hero-text {
      position: relative; /* Above the image */
      z-index: 2;
      color: white;
      text-align: center;
      padding: var(--space-lg);
  }

  .hero-text h1 {
      font-size: 2.5rem;
      margin-bottom: var(--space-sm);
      font-weight: 700;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6);
  }

  .hero-text p {
    font-size: 1.2rem;
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: var(--space-lg);
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
  }

  /* Adjust hero size on larger screens */
  @media (min-width: 768px) {
      .hero-section {
          min-height: 350px;
      }
      .hero-text h1 {
          font-size: 3rem;
      }
       .hero-text p {
          font-size: 1.3rem;
       }
  }

  /* --- Shortcuts Section --- */
  .shortcuts-section {
    margin-bottom: var(--space-xxl);
  }

  .shortcuts-section h2 {
    text-align: center;
    color: var(--ocean-blue-dark);
    margin-bottom: var(--space-xl); /* More space below title */
    font-size: 1.8rem; /* Slightly larger title */
  }

  .shortcuts-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-lg);
    padding: 0 var(--space-md);
    max-width: 900px;
    margin: 0 auto;
  }

  /* Style the shortcut links as cards */
  .shortcut-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: var(--space-lg);
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-md);
    text-decoration: none;
    color: var(--text-primary);
    text-align: center;
    transition: transform var(--transition-normal), box-shadow var(--transition-normal), border-color var(--transition-normal);
    min-height: 150px;
    box-shadow: var(--shadow-sm);
  }

  .shortcut-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    border-color: var(--ocean-blue-light);
    background-color: var(--sandy-beige-light);
  }

  .shortcut-icon {
    margin-bottom: var(--space-md);
    color: var(--ocean-blue);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform var(--transition-normal);
  }

  .shortcut-card:hover .shortcut-icon {
    transform: scale(1.1);
  }

  .shortcut-label {
    font-size: 0.95rem;
    font-weight: 600;
    color: var(--ocean-blue-dark);
  }

  /* Responsive: 3 columns on medium screens and up */
  @media (min-width: 600px) {
    .shortcuts-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
   /* Responsive: Wider gap on large screens */
  @media (min-width: 900px) {
       .shortcuts-grid {
           gap: var(--space-xl); /* 32px gap */
       }
  }


  /* --- Weather Section --- */
  .weather-section {
    margin-bottom: var(--space-xxl);
    /* Center the widget if its container doesn't */
     max-width: 400px; /* Limit width of weather widget if needed */
     margin-left: auto;
     margin-right: auto;
  }

  /* --- Optional Featured Section --- */
  /* .featured-section { margin-bottom: var(--space-xxl); }
  .featured-section h2 { text-align: center; color: var(--ocean-blue-dark); margin-bottom: var(--space-xl); font-size: 1.8rem; }
  .featured-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: var(--space-lg); max-width: 1200px; margin: 0 auto; }
  :global(.featured-grid .card-link) { width: 100%; } */

</style>

========== FIN FICHIER: H:\my apps\agadir tourism\src\routes\+page.svelte ==========


========== FICHIER: H:\my apps\agadir tourism\src\app.css ==========

/* src/app.css */

/* 1. Importation des Polices Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Open+Sans:wght@400;500;600&display=swap');

/* 2a. DÃ©finition des Variables CSS Globales (Light Theme - Default) */
:root {
  /* --- Palette Couleurs (Light) --- */
  /* Primary Colors - Ocean Blue */
  --ocean-blue: #3E8CAA;
  --ocean-blue-light: #65A7C0;
  --ocean-blue-dark: #2A6F8C;

  /* Secondary Colors - Sandy Beige */
  --sandy-beige: #E2D1B5;
  --sandy-beige-light: #F0E6D6;
  --sandy-beige-dark: #C9B596;

  /* Accent Colors - Sunset Orange */
  --sunset-orange: #E88C50;
  --sunset-orange-light: #F2AA7A;
  --sunset-orange-dark: #D06F35;

  /* Neutral Colors (Mode Clair par dÃ©faut) */
  --bg-primary: var(--soft-white); /* Fond principal */
  --bg-secondary: var(--light-sand); /* Fond secondaire (cartes, etc.) */
  --text-primary: var(--charcoal); /* Texte principal */
  --text-secondary: var(--medium-gray); /* Texte secondaire */
  --border-color: var(--sandy-beige-dark); /* Bordures */

  /* Neutrals spÃ©cifiques (Light) */
  --soft-white: #F8F9FA;
  --light-sand: #F2EBE1;
  --charcoal: #303841;
  --medium-gray: #8A959E;

  /* --- Layout & Effects (Common) --- */
  /* Espacement */
  --space-xs: 4px;
  --space-sm: 8px;
  --space-md: 16px;
  --space-lg: 24px;
  --space-xl: 32px;
  --space-xxl: 48px;

  /* Rayon de Bordure */
  --radius-sm: 4px;
  --radius-md: 8px;
  --radius-lg: 16px;
  --radius-full: 9999px;

  /* Ombres (Light Theme values) */
  --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.07);
  --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);

  /* Transitions */
  --transition-fast: 150ms ease;
  --transition-normal: 250ms ease;
  --transition-slow: 350ms ease;

  /* --- Typographie (Common) --- */
  --font-heading: 'Playfair Display', serif;
  --font-body: 'Open Sans', sans-serif;
}

/* 2b. Dark Theme Variable Overrides (Activated by data-theme='dark') */
:root[data-theme='dark'] {
  /* --- Palette Couleurs (Dark) --- */
  --ocean-blue: #4A9BC1;
  --ocean-blue-light: #7BB8D3;
  --ocean-blue-dark: #3E8CAA;

  --sandy-beige: #5C5140;
  --sandy-beige-light: #756751;
  --sandy-beige-dark: #473E31;

  --sunset-orange: #F29860;
  --sunset-orange-light: #F7B88F;
  --sunset-orange-dark: #E88C50;

  /* Neutral Colors (Dark Mode) */
  --bg-primary: #212529;
  --bg-secondary: #343A40;
  --text-primary: #F8F9FA;
  --text-secondary: #ADB5BD;
  --border-color: #495057;

  /* Neutrals spÃ©cifiques (Dark) */
  --soft-white: #dee2e6;
  --light-sand: #495057;
  --charcoal: #e9ecef;
  --medium-gray: #ced4da;

  /* Ombres (Dark Theme values) */
  --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.15);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.2);
  --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.25);
}

/* 2c. Automatic System Preference (Optional Default) */
@media (prefers-color-scheme: dark) {
    /* Apply dark vars ONLY if NO theme is explicitly set to light */
    :root:not([data-theme='light']) {
        /* --- Palette Couleurs (Dark) --- */
        --ocean-blue: #4A9BC1;
        --ocean-blue-light: #7BB8D3;
        --ocean-blue-dark: #3E8CAA;
        --sandy-beige: #5C5140;
        --sandy-beige-light: #756751;
        --sandy-beige-dark: #473E31;
        --sunset-orange: #F29860;
        --sunset-orange-light: #F7B88F;
        --sunset-orange-dark: #E88C50;
        /* Neutral Colors (Dark Mode) */
        --bg-primary: #212529;
        --bg-secondary: #343A40;
        --text-primary: #F8F9FA;
        --text-secondary: #ADB5BD;
        --border-color: #495057;
        /* Neutrals spÃ©cifiques (Dark) */
        --soft-white: #dee2e6;
        --light-sand: #495057;
        --charcoal: #e9ecef;
        --medium-gray: #ced4da;
        /* Ombres (Dark Theme values) */
        --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.15);
        --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.2);
        --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.25);
    }
}

/* 3. Styles Globaux de Base (Reset lÃ©ger et application des variables) */
*,
*::before,
*::after {
  box-sizing: border-box; /* Inclusion padding/border dans la taille totale */
}

html {
  /* Permet d'utiliser facilement rem pour le responsive font size si besoin */
  font-size: 16px;
}

body {
  margin: 0; /* Supprime marges par dÃ©faut */
  font-family: var(--font-body); /* Police par dÃ©faut pour le corps */
  font-size: 1rem; /* Taille de police de base (16px) */
  line-height: 1.6; /* Hauteur de ligne */
  color: var(--text-primary); /* Couleur texte principale */
  background-color: var(--bg-primary); /* Couleur de fond principale */
  -webkit-font-smoothing: antialiased; /* Meilleur rendu des polices */
  -moz-osx-font-smoothing: grayscale;
}

/* Styles par dÃ©faut pour les liens */
a {
  color: var(--ocean-blue); /* Utilise la couleur primaire */
  text-decoration: none; /* Pas de soulignement par dÃ©faut */
  transition: color var(--transition-fast); /* Transition couleur au survol */
}

a:hover {
  color: var(--ocean-blue-dark); /* Assombrit au survol */
  text-decoration: underline; /* Souligne au survol */
}

/* Styles par dÃ©faut pour les images */
img, video, svg {
  max-width: 100%; /* Assure la responsivitÃ© */
  height: auto; /* Garde les proportions */
  display: block; /* Ã‰vite les espaces indÃ©sirables en dessous */
}

/* Styles pour les titres (exemple de base, peut Ãªtre ajustÃ© dans les composants) */
h1, h2, h3, h4, h5, h6 {
  font-family: var(--font-heading); /* Police pour les titres */
  font-weight: 700; /* Poids par dÃ©faut (Playfair Display) */
  margin-top: var(--space-lg);
  margin-bottom: var(--space-md);
  line-height: 1.2; /* Hauteur de ligne plus serrÃ©e pour les titres */
}

h1 { font-size: 2rem; } /* 32px */
h2 { font-size: 1.5rem; } /* 24px */
h3 { font-size: 1.25rem; } /* 20px */
h4 { font-size: 1.125rem; } /* 18px */
h5 { font-size: 1rem; } /* 16px */
h6 { font-size: 0.875rem; } /* 14px */

/* Paragraphes */
p {
  margin-bottom: var(--space-md);
}

/* Conteneur principal de contenu (ajustÃ© de l'ancien 'main') */
main {
  display: block; /* Assure que c'est un block */
  max-width: 1200px; /* Garde la largeur max */
  margin-left: auto;
  margin-right: auto;
  padding: var(--space-lg) var(--space-md); /* Utilise les variables d'espacement */
}

/* === Custom Map Markers (Circle + Line Pin Style) === */

.custom-map-marker {
    /* The Circle Part */
    width: 20px;  /* Increased size */
    height: 20px; /* Increased size */
    border-radius: 50%;
    border: 2px solid white;
    box-shadow: var(--shadow-md);
    position: relative;
    box-sizing: border-box;
    background-color: var(--medium-gray);
}

/* The Line (Stem) Part */
.custom-map-marker::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    width: 2px;
    height: 15px;
    background-color: white; /* Changed to white */
    /* Optional: add a very subtle shadow to the stem if needed */
    /* box-shadow: 0px 1px 1px rgba(0,0,0,0.3); */
}

/* --- Color Modifiers (Apply only to the circle) --- */
.custom-map-marker.marker-type-place {
    background-color: var(--ocean-blue);
    /* No need to set 'color' here anymore */
}
.custom-map-marker.marker-type-restaurant {
    background-color: var(--sunset-orange);
}

/* Keep other optional specific styles commented out or remove */
/* .custom-map-marker.marker-cat-beach { ... } */

/* === Custom Map Markers === */

/* === 4. Styles pour les Boutons === */

/* Style de base commun Ã  tous les boutons */
.btn {
  display: inline-block; /* Comportement bloc mais en ligne */
  padding: var(--space-sm) var(--space-lg); /* 8px 24px - Plus large que haut */
  font-family: var(--font-body); /* Utilise la police du corps */
  font-size: 1rem; /* 16px */
  font-weight: 600; /* Un peu plus gras */
  text-align: center;
  text-decoration: none; /* Au cas oÃ¹ on utilise sur un <a> */
  border: 1px solid transparent; /* Bordure transparente par dÃ©faut */
  border-radius: var(--radius-md); /* Coins arrondis (8px) */
  cursor: pointer;
  transition: background-color var(--transition-normal), color var(--transition-normal), border-color var(--transition-normal), transform var(--transition-fast);
  user-select: none; /* EmpÃªche la sÃ©lection de texte sur le bouton */
  white-space: nowrap; /* EmpÃªche le texte de passer Ã  la ligne */
}

/* Style "Primary" (Bleu OcÃ©an) - Pour les actions principales */
.btn-primary {
  background-color: var(--ocean-blue);
  color: white;
  border-color: var(--ocean-blue);
}

.btn-primary:hover,
.btn-primary:focus { /* Ajout :focus pour accessibilitÃ© */
  background-color: var(--ocean-blue-dark);
  border-color: var(--ocean-blue-dark);
  color: white; /* S'assurer que la couleur reste blanche */
  transform: translateY(-2px); /* Effet de soulÃ¨vement lÃ©ger */
  outline: none; /* On gÃ¨re le focus avec les autres styles */
}
.btn-primary:active {
    transform: translateY(0); /* Retour Ã  la position initiale au clic */
}


/* Style "Secondary" (Contour Bleu OcÃ©an) - Pour actions secondaires */
.btn-secondary {
  background-color: transparent;
  color: var(--ocean-blue);
  border-color: var(--ocean-blue);
}

.btn-secondary:hover,
.btn-secondary:focus {
  background-color: var(--ocean-blue-light); /* Fond trÃ¨s lÃ©ger au survol */
  color: white;
  border-color: var(--ocean-blue);
  transform: translateY(-2px);
  outline: none;
}
.btn-secondary:active {
    transform: translateY(0);
}


/* Style "Accent" (Orange Coucher de Soleil) - Pour actions mises en avant (ex: CTA) */
.btn-accent {
  background-color: var(--sunset-orange);
  color: white;
  border-color: var(--sunset-orange);
}

.btn-accent:hover,
.btn-accent:focus {
  background-color: var(--sunset-orange-dark);
  border-color: var(--sunset-orange-dark);
  color: white;
  transform: translateY(-2px);
  outline: none;
}
.btn-accent:active {
    transform: translateY(0);
}


/* Style "Danger/Warning" (Optionnel - Rouge doux) - Pour actions de suppression/alerte */
/* On utilise une nuance de l'orange foncÃ© pour rester dans la palette */
.btn-danger {
    background-color: var(--sunset-orange-dark);
    color: white;
    border-color: var(--sunset-orange-dark);
}

.btn-danger:hover,
.btn-danger:focus {
    background-color: #c05a23; /* Version encore plus foncÃ©e de l'orange */
    border-color: #c05a23;
    color: white;
    transform: translateY(-2px);
    outline: none;
}
.btn-danger:active {
    transform: translateY(0);
}

/* Style pour bouton "texte" (sans fond ni bordure) */
.btn-text {
    background-color: transparent;
    color: var(--ocean-blue);
    border: none;
    padding: var(--space-sm); /* Moins de padding horizontal */
}
.btn-text:hover,
.btn-text:focus {
    background-color: rgba(62, 140, 170, 0.1); /* LÃ©ger fond bleu transparent */
    color: var(--ocean-blue-dark);
    outline: none;
}


/* Ajustements Taille (Optionnel) */
.btn-sm {
    font-size: 0.875rem; /* 14px */
    padding: var(--space-xs) var(--space-md); /* 4px 16px */
}

.btn-lg {
    font-size: 1.125rem; /* 18px */
    padding: var(--space-md) var(--space-xl); /* 16px 32px */
}

========== FIN FICHIER: H:\my apps\agadir tourism\src\app.css ==========


========== FICHIER: H:\my apps\agadir tourism\src\app.html ==========

<!doctype html>
<html lang="fr">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />

		<!-- Liens CDN pour Leaflet (CSS & JS) - UNE SEULE FOIS -->
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
		<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

		<!-- Favicon gÃ©rÃ© par SvelteKit/Vite -->
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />

		<!-- Meta Tags PWA -->
		<!-- ðŸŽ¨ Mise Ã  jour de la couleur thÃ¨me avec la nouvelle couleur primaire -->
		<meta name="theme-color" content="#3E8CAA" />
		<link rel="manifest" href="%sveltekit.assets%/manifest.json" />

		<!-- Google Fonts seront importÃ©es via app.css -->

		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>

========== FIN FICHIER: H:\my apps\agadir tourism\src\app.html ==========


========== FICHIER: H:\my apps\agadir tourism\src\service-worker.js ==========

/// <reference types="@sveltejs/kit" />
import { build, files, version } from '$service-worker';
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

// --- Configuration ---
const CACHE_PREFIX = 'agadir-pwa';
const CORE_CACHE_NAME = `${CACHE_PREFIX}-core-v${version}`; // Cache pour les fichiers de l'app (gÃ©rÃ© par Workbox)
const ASSETS_CACHE_NAME = `${CACHE_PREFIX}-assets-v1`;     // Cache pour les images locales, fontes...
const API_CACHE_NAME = `${CACHE_PREFIX}-api-v1`;          // Cache pour les rÃ©ponses Supabase
const MAP_TILES_CACHE_NAME = `${CACHE_PREFIX}-map-tiles-v1`; // Cache pour les tuiles de carte

// --- PrÃ©-cache des fichiers de l'application ---
// 'build' contient les fichiers gÃ©nÃ©rÃ©s par SvelteKit (JS, CSS chunks)
// 'files' contient les fichiers statiques (dans /static)
// 'prerendered' contient les routes prÃ©-rendues (si activÃ©)

// Fichiers Ã  mettre en cache immÃ©diatement lors de l'installation
// On ajoute explicitement les fichiers importants de /static qui ne sont pas automatiquement inclus par `files` parfois
const coreAssetsToCache = [
    ...build,
    ...files.filter(f => f.startsWith('/assets/') || f === '/manifest.json'), // Inclut nos assets et le manifest
    // Tu peux ajouter d'autres fichiers statiques importants ici si besoin
];

// Utilise Workbox pour gÃ©rer le prÃ©-cache
precacheAndRoute(
    coreAssetsToCache.map(url => ({ url, revision: version })), // Associe une rÃ©vision pour la mise Ã  jour
    {
        cacheName: CORE_CACHE_NAME,
        // Ignore les paramÃ¨tres d'URL pour le cache des fichiers de base
        ignoreURLParametersMatching: [/.*/]
    }
);


// --- Mise en cache des Ressources Locales (Images, Fontes...) ---
// StratÃ©gie: Cache First - On sert depuis le cache si dispo, sinon rÃ©seau, puis on met en cache.
registerRoute(
    ({ request, url }) => request.destination === 'image' && url.origin === self.location.origin,
    new CacheFirst({
        cacheName: ASSETS_CACHE_NAME,
        plugins: [
            new ExpirationPlugin({
                maxEntries: 100, // Garde les 100 derniÃ¨res images
                maxAgeSeconds: 30 * 24 * 60 * 60, // 30 jours
                purgeOnQuotaError: true, // Supprime ce cache si manque de place
            }),
        ],
    })
);
// Tu peux ajouter une rÃ¨gle similaire pour les fontes (request.destination === 'font')

// --- Mise en cache des Tuiles de Carte (OpenStreetMap) ---
// StratÃ©gie: Stale While Revalidate - On sert depuis le cache (rapide), mais on met Ã  jour en arriÃ¨re-plan.
registerRoute(
    ({ url }) => url.origin === 'https://a.tile.openstreetmap.org' ||
                 url.origin === 'https://b.tile.openstreetmap.org' ||
                 url.origin === 'https://c.tile.openstreetmap.org',
    new StaleWhileRevalidate({
        cacheName: MAP_TILES_CACHE_NAME,
        plugins: [
            new ExpirationPlugin({
                maxEntries: 500, // Garde un bon nombre de tuiles
                maxAgeSeconds: 7 * 24 * 60 * 60, // 7 jours
                 purgeOnQuotaError: true,
            }),
        ],
    })
);

// --- Mise en cache des Librairies externes (Leaflet CSS/JS depuis unpkg) ---
// StratÃ©gie: Cache First - Ces fichiers ne changent pas souvent pour une version donnÃ©e.
registerRoute(
    ({ url }) => url.origin === 'https://unpkg.com',
    new CacheFirst({
        cacheName: `${CACHE_PREFIX}-external-libs-v1`,
        plugins: [
            new ExpirationPlugin({
                maxEntries: 10, // Peu de fichiers externes
                maxAgeSeconds: 30 * 24 * 60 * 60, // 30 jours
                 purgeOnQuotaError: true,
            }),
        ],
    })
);


// --- Mise en cache des Appels API (Supabase) ---
// StratÃ©gie: Network First - On veut les donnÃ©es fraÃ®ches si possible, sinon on prend le cache.
registerRoute(
    ({ url }) => url.origin === new URL(import.meta.env.VITE_SUPABASE_URL).origin &&
                 url.pathname.startsWith('/rest/v1/'), // Cible les appels Ã  l'API REST Supabase
    new NetworkFirst({
        cacheName: API_CACHE_NAME,
        networkTimeoutSeconds: 5, // DÃ©lai avant de tomber sur le cache (si rÃ©seau lent)
        plugins: [
            new ExpirationPlugin({
                maxEntries: 50, // Garde les 50 derniÃ¨res rÃ©ponses API
                maxAgeSeconds: 1 * 24 * 60 * 60, // 1 jour (donnÃ©es peuvent changer)
            }),
        ],
    })
);


// --- Gestion du Cycle de Vie du Service Worker ---

// S'assure que le nouveau SW s'active dÃ¨s qu'il est installÃ©
self.addEventListener('install', (event) => {
    console.log('SW: Installation...');
    // Force le SW en attente Ã  devenir le SW actif.
    self.skipWaiting();
});

self.addEventListener('activate', (event) => {
    console.log('SW: Activation...');
    // Prend le contrÃ´le des clients (onglets) immÃ©diatement.
    event.waitUntil(self.clients.claim());

    // Nettoyage des anciens caches (ceux qui ne correspondent pas aux noms actuels)
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (cacheName.startsWith(CACHE_PREFIX) &&
                        cacheName !== CORE_CACHE_NAME &&
                        cacheName !== ASSETS_CACHE_NAME &&
                        cacheName !== API_CACHE_NAME &&
                        cacheName !== MAP_TILES_CACHE_NAME /* ajoute d'autres caches ici */ ) {
                        console.log('SW: Suppression ancien cache:', cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
     console.log('SW: PrÃªt Ã  gÃ©rer les fetchs.');
});

self.addEventListener('fetch', (event) => {
    // Laisse Workbox gÃ©rer les routes enregistrÃ©es
    // console.log('SW: Fetching', event.request.url);
});

========== FIN FICHIER: H:\my apps\agadir tourism\src\service-worker.js ==========


